# Task ID: 1
# Title: Initialize Next.js 15 Project with TypeScript
# Status: pending
# Dependencies: None
# Priority: high
# Description: Set up the foundational Next.js project with TypeScript, Biome for linting/formatting, and modern Next.js 15 configurations including PWA support and experimental features
# Details:
Create a new Next.js 15 project named 'contribux' using pnpm with TypeScript and App Router. Configure Biome for linting and formatting with strict TypeScript rules. Initialize git repository and create organized folder structure: src/app, src/components (ui, features), src/lib, src/hooks, src/types, src/context. Configure next.config.js for PWA support using next-pwa, edge runtime, and experimental PPR. Set up VS Code workspace with recommended extensions and environment variables structure.

# Test Strategy:
Verify project builds successfully with `pnpm build`, all linting passes with `pnpm lint` using Biome, TypeScript compilation succeeds with strict mode, and basic Next.js app loads on localhost:3000

# Subtasks:
## 1. Create Next.js 15 Project with pnpm [pending]
### Dependencies: None
### Description: Initialize a new Next.js 15 project named 'contribux' using pnpm with TypeScript, Tailwind, App Router, and Turbo
### Details:
Run 'pnpm create next-app@latest contribux --typescript --tailwind --app --turbo --src-dir --import-alias "@/*"' to create the project with modern defaults including TypeScript, Tailwind CSS, App Router, Turbo for faster builds, src directory, and import aliases

## 2. Configure pnpm Package Manager [pending]
### Dependencies: 1.1
### Description: Set up pnpm configuration with proper settings and workspace configuration
### Details:
Create .pnpmrc file with package manager settings, configure package.json scripts for pnpm workflow, set up workspace configuration if needed, and ensure all commands use pnpm exclusively

## 3. Setup Biome for Linting and Formatting [pending]
### Dependencies: 1.2
### Description: Configure Biome as the primary tool for linting and formatting, replacing ESLint and Prettier
### Details:
Install @biomejs/biome, create biome.json configuration with strict TypeScript rules, configure formatting and linting rules, set up import sorting, and integrate with package.json scripts. Remove default ESLint configuration in favor of Biome

## 4. Configure Strict TypeScript Mode [pending]
### Dependencies: 1.1
### Description: Set up TypeScript with all strict settings enabled for maximum type safety
### Details:
Update tsconfig.json with strict mode enabled, noUncheckedIndexedAccess, exactOptionalPropertyTypes, noImplicitReturns, noFallthroughCasesInSwitch, and other strict TypeScript compiler options for enhanced type checking

## 5. Create Organized Folder Structure [pending]
### Dependencies: 1.1
### Description: Establish a scalable folder structure optimized for component organization and feature-based development
### Details:
Create folders: src/components/ui (reusable UI components), src/components/features (feature-specific components), src/lib (utilities, constants), src/hooks (custom React hooks), src/types (TypeScript type definitions), src/context (React context providers), and src/app (pages and layouts). Set up index.ts files for clean imports

## 6. Configure Next.js with PWA and Modern Features [pending]
### Dependencies: 1.4, 1.5
### Description: Set up next.config.js with PWA support, edge runtime, and experimental features
### Details:
Install next-pwa and configure next.config.js with PWA settings, enable edge runtime where appropriate, configure experimental PPR (Partial Prerendering), set up proper TypeScript configuration, and configure Tailwind CSS integration

## 7. Setup VS Code Workspace Configuration [pending]
### Dependencies: 1.3
### Description: Create VS Code settings.json with recommended extensions and workspace settings
### Details:
Create .vscode/settings.json with Biome integration, recommended extensions list including Biome VS Code extension, TypeScript settings, auto-formatting on save, and workspace-specific configurations for optimal development experience

## 8. Configure Environment Variables and Git [pending]
### Dependencies: 1.6
### Description: Set up environment variables structure and initialize git repository with proper ignore files
### Details:
Create .env.local and .env.example files with Next.js environment variable conventions, update .gitignore for Next.js and pnpm, initialize git repository, and create initial commit with project setup

