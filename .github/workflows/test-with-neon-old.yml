name: Test with Neon Branching

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.1'

jobs:
  test:
    name: Run Tests with Neon Branch
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright:install

      - name: Create Neon branch for tests
        id: create-branch
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="ci-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          echo "Creating Neon branch: $BRANCH_NAME"
          
          # Create branch using Neon API
          RESPONSE=$(curl -s -m 30 -X POST \
            "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            -H "Authorization: Bearer $NEON_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"branch\": {\"name\": \"$BRANCH_NAME\"}}")
          
          BRANCH_ID=$(echo $RESPONSE | jq -r '.branch.id')
          CONNECTION_URI=$(echo $RESPONSE | jq -r '.connection_uris[0].connection_uri')
          
          echo "branch_id=$BRANCH_ID" >> $GITHUB_OUTPUT
          echo "connection_uri=$CONNECTION_URI" >> $GITHUB_OUTPUT
          echo "DATABASE_URL=$CONNECTION_URI" >> $GITHUB_ENV

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Run unit tests
        run: pnpm test

      - name: Run database tests
        env:
          DATABASE_URL: ${{ steps.create-branch.outputs.connection_uri }}
          DATABASE_URL_TEST: ${{ steps.create-branch.outputs.connection_uri }}
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: pnpm test:db
        timeout-minutes: 3

      - name: Run integration tests
        if: github.event_name == 'push' || github.event.pull_request.draft == false
        env:
          DATABASE_URL: ${{ steps.create-branch.outputs.connection_uri }}
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: pnpm test:integration:ci
        timeout-minutes: 5

      - name: Upload coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

      - name: Delete Neon branch
        if: always()
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          if [ -n "${{ steps.create-branch.outputs.branch_id }}" ]; then
            echo "Deleting Neon branch: ${{ steps.create-branch.outputs.branch_id }}"
            curl -s -X DELETE \
              "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches/${{ steps.create-branch.outputs.branch_id }}" \
              -H "Authorization: Bearer $NEON_API_KEY"
          fi

  # Separate job for E2E tests with its own Neon branch
  e2e:
    name: E2E Tests with Neon
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright:install

      - name: Create Neon branch for E2E
        id: create-e2e-branch
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          BRANCH_NAME="e2e-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          echo "Creating Neon branch for E2E: $BRANCH_NAME"
          
          RESPONSE=$(curl -s -m 30 -X POST \
            "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            -H "Authorization: Bearer $NEON_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"branch\": {\"name\": \"$BRANCH_NAME\"}}")
          
          BRANCH_ID=$(echo $RESPONSE | jq -r '.branch.id')
          CONNECTION_URI=$(echo $RESPONSE | jq -r '.connection_uris[0].connection_uri')
          
          echo "branch_id=$BRANCH_ID" >> $GITHUB_OUTPUT
          echo "DATABASE_URL=$CONNECTION_URI" >> $GITHUB_ENV

      - name: Build application
        run: pnpm build

      - name: Run E2E tests
        env:
          DATABASE_URL: ${{ steps.create-e2e-branch.outputs.connection_uri }}
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          CI: true
        run: pnpm test:e2e:ci
        timeout-minutes: 10

      - name: Delete E2E Neon branch
        if: always()
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          if [ -n "${{ steps.create-e2e-branch.outputs.branch_id }}" ]; then
            echo "Deleting E2E Neon branch: ${{ steps.create-e2e-branch.outputs.branch_id }}"
            curl -s -X DELETE \
              "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches/${{ steps.create-e2e-branch.outputs.branch_id }}" \
              -H "Authorization: Bearer $NEON_API_KEY"
          fi