name: 🚀 Deploy to Vercel

on:
  push:
    branches: [main, feat/week-1-security-ai-infrastructure-clean]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type check
        run: pnpm type-check

      - name: ✨ Lint
        run: pnpm lint

      - name: 🧪 Run unit tests
        run: pnpm test:unit:enhanced

      - name: 🔒 Security tests
        run: pnpm test:security

      - name: 🏗️ Test build
        run: pnpm build
        env:
          SKIP_ENV_VALIDATION: true

  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🌐 Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: 🔍 Health Check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.deployment_url }}/api/health || exit 1

      - name: 💬 Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployment ready!**
              
              📎 **Preview URL:** ${{ steps.deploy.outputs.deployment_url }}
              
              ✅ **Health Check:** Passed
              🔧 **Build Status:** Success
              
              Deploy triggered by: ${context.actor}
              Commit: ${context.sha.substring(0, 7)}`
            })

  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🌐 Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: 🔍 Production Health Check
        run: |
          sleep 60
          curl -f ${{ steps.deploy.outputs.deployment_url }}/api/health || exit 1

      - name: 📊 Performance Validation
        run: |
          curl -f ${{ steps.deploy.outputs.deployment_url }}/api/metrics || echo "Metrics endpoint not yet available"

      - name: 📣 Deployment Notification
        run: |
          echo "✅ Production deployment successful!"
          echo "🌐 URL: ${{ steps.deploy.outputs.deployment_url }}"
          echo "🔍 Health check: ✅ Passed"
          echo "📊 Performance metrics: Available"

  lighthouse:
    name: 🏆 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./.lighthouserc.json