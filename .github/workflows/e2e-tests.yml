name: E2E Tests with Neon Database

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.4'

jobs:
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    # Service containers for Redis if needed
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js and pnpm
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm ${{ env.PNPM_VERSION }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      # Cache dependencies
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Create Neon branch for E2E testing
      - name: Create Neon E2E Test Branch
        id: create-branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          api_key: ${{ env.NEON_API_KEY }}
          branch_name: 'e2e-test-${{ github.run_id }}-${{ github.run_attempt }}'
          username: 'neondb_owner'
          database: 'neondb'

      # Setup environment variables for the application
      - name: Setup Environment Variables
        run: |
          cat > .env.local << EOF
          # Database Configuration
          DATABASE_URL="${{ steps.create-branch.outputs.db_url_with_pooler }}"
          DATABASE_URL_DEV="${{ steps.create-branch.outputs.db_url_with_pooler }}"
          DATABASE_URL_TEST="${{ steps.create-branch.outputs.db_url_with_pooler }}"
          
          # Application Configuration
          NODE_ENV=test
          NEXTAUTH_URL=http://127.0.0.1:3000
          NEXTAUTH_SECRET=test-secret-for-e2e-testing-only
          
          # Disable telemetry and optimizations for testing
          NEXT_TELEMETRY_DISABLED=1
          NEXT_PRIVATE_STANDALONE=1
          
          # Mock external services for E2E testing
          GITHUB_CLIENT_ID=test-client-id
          GITHUB_CLIENT_SECRET=test-client-secret
          
          # Redis Configuration (using service container)
          REDIS_URL=redis://localhost:6379
          
          # Monitoring/Observability (disabled for testing)
          OTEL_EXPORTER_OTLP_ENDPOINT=""
          MONITORING_ENABLED=false
          EOF

      # Run database migrations
      - name: Run Database Migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: ${{ steps.create-branch.outputs.db_url_with_pooler }}

      # Install Playwright browsers
      - name: Install Playwright Browsers
        run: pnpm playwright:install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: false

      # Cache Playwright browsers
      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # Build the application
      - name: Build Application
        run: pnpm build
        env:
          DATABASE_URL: ${{ steps.create-branch.outputs.db_url_with_pooler }}
          NODE_OPTIONS: '--max-old-space-size=2048'

      # Run E2E tests
      - name: Run E2E Tests
        run: pnpm test:e2e:ci
        env:
          DATABASE_URL: ${{ steps.create-branch.outputs.db_url_with_pooler }}
          CI: true
          NODE_OPTIONS: '--max-old-space-size=2048'
          # Playwright specific settings
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      # Upload Playwright artifacts on failure
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
            screenshots/
          retention-days: 7
          compression-level: 6

      # Upload coverage reports if available
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-coverage-${{ github.run_id }}
          path: coverage/
          retention-days: 3
          if-no-files-found: ignore

      # Clean up Neon branch (always runs, even on failure)
      - name: Delete Neon E2E Test Branch
        if: always()
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ env.NEON_PROJECT_ID }}
          api_key: ${{ env.NEON_API_KEY }}
          branch_id: ${{ steps.create-branch.outputs.branch_id }}

      # Report test results summary
      - name: Test Results Summary
        if: always()
        run: |
          echo "## E2E Test Results üé≠" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`e2e-test-${{ github.run_id }}-${{ github.run_attempt }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: \`${{ steps.create-branch.outputs.db_url_with_pooler }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $([ ${{ job.status }} == 'success' ] && echo '‚úÖ Passed' || echo '‚ùå Failed')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f playwright-report.json ]; then
            echo "### Test Statistics" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            jq '.stats' playwright-report.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Unable to parse test statistics"
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional: Security scan of E2E test artifacts
  security-scan:
    name: Security Scan E2E Artifacts
    runs-on: ubuntu-latest
    needs: e2e-test
    if: always() && (needs.e2e-test.result == 'success' || needs.e2e-test.result == 'failure')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download E2E artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: "*-${{ github.run_id }}"
          path: ./artifacts

      - name: Security scan of artifacts
        run: |
          echo "üîç Scanning E2E test artifacts for sensitive data..."
          
          # Check for potential secrets or sensitive data in test artifacts
          if find ./artifacts -type f \( -name "*.html" -o -name "*.json" -o -name "*.log" \) -exec grep -l -i "password\|secret\|token\|key" {} \; | head -5; then
            echo "‚ö†Ô∏è  Warning: Potential sensitive data found in test artifacts"
            echo "::warning::Sensitive data patterns detected in E2E test artifacts"
          else
            echo "‚úÖ No sensitive data patterns found in test artifacts"
          fi
          
          # Check artifact sizes
          find ./artifacts -type f -size +10M | while read -r file; do
            echo "::warning::Large test artifact detected: $file ($(du -h "$file" | cut -f1))"
          done || true