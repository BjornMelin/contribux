
> contribux@0.1.0 test:coverage /home/bjorn/repos/agents/contribux
> vitest run --coverage -- --run --reporter\=json


 RUN  v3.2.4 /home/bjorn/repos/agents/contribux
      Coverage enabled with v8

 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > REST API rate limiting > should track rate limit headers from responses 39ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > REST API rate limiting > should handle rate limit exceeded (403) errors 19ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > REST API rate limiting > should retry with exponential backoff when rate limited 2028ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > REST API rate limiting > should handle secondary rate limits 35ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > REST API rate limiting > should queue requests when approaching rate limit 61ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > GraphQL rate limiting > should track GraphQL rate limit info from responses 4ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > GraphQL rate limiting > should calculate GraphQL query complexity 0ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > GraphQL rate limiting > should prevent queries exceeding 500,000 node limit 7ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > GraphQL rate limiting > should split large queries to stay under point limit 7ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > Rate limit monitoring > should provide rate limit status across all resources 18ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > Rate limit monitoring > should emit rate limit warnings when approaching limits 29ms
 ✓ tests/github/rate-limiting.test.ts > GitHub Rate Limiting > Rate limit monitoring > should implement jitter in retry delays 1ms
 × tests/database/vector-search.test.ts > Vector Search Integration > User Profile Vector Search > should find similar user profiles using HNSW index 35ms
   → expected false to be true // Object.is equality
 × tests/database/vector-search.test.ts > Vector Search Integration > User Profile Vector Search > should handle edge cases in vector search 28ms
   → Edge case query 'edge_case_zeros' failed: expected NaN to be greater than or equal to -1
 ✓ tests/database/vector-search.test.ts > Vector Search Integration > Repository Vector Search > should find repositories with similar descriptions 59ms
 × tests/database/vector-search.test.ts > Vector Search Integration > Opportunity Vector Search > should find opportunities with similar titles and descriptions 76ms
   → operator does not exist: double precision <=> halfvec
 ✓ tests/database/vector-search.test.ts > Vector Search Integration > Hybrid Search (Text + Vector) > should combine text and vector search effectively 74ms
 × tests/database/vector-search.test.ts > Vector Search Integration > Vector Index Performance > should demonstrate HNSW index performance benefits 37ms
   → duplicate key value violates unique constraint "users_github_id_key"
 ✓ tests/database/vector-search.test.ts > Vector Search Integration > Vector Index Performance > should benchmark different distance metrics 6ms
stdout | tests/auth/database-schema.test.ts
Database tests using: postgresql://testuser:***@localhost:5432/testdb

 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > WebAuthn Tables > should have webauthn_credentials table 12ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > WebAuthn Tables > should have correct webauthn_credentials columns 14ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > WebAuthn Tables > should have unique constraint on credential_id 11ms
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Authentication Challenges Table > should have auth_challenges table 12ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > Authentication Challenges Table > should have correct auth_challenges columns 13ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Sessions Table > should have user_sessions table 11ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > Sessions Table > should have correct user_sessions columns 12ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > OAuth Accounts Table > should have oauth_accounts table 11ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > OAuth Accounts Table > should have correct oauth_accounts columns 15ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > OAuth Accounts Table > should have unique constraint on provider and provider_account_id 11ms
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Audit Logs Table > should have security_audit_logs table 11ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > Audit Logs Table > should have correct security_audit_logs columns 14ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Audit Logs Table > should have index on event_type and created_at 12ms
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > User Consent Table > should have user_consents table for GDPR 11ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > User Consent Table > should have correct user_consents columns 16ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Refresh Tokens Table > should have refresh_tokens table 12ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > Refresh Tokens Table > should have correct refresh_tokens columns 13ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Refresh Tokens Table > should have unique constraint on token_hash 12ms
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Foreign Key Relationships > should have foreign key from webauthn_credentials to users 11ms
 ✓ tests/auth/database-schema.test.ts > Authentication Database Schema > Foreign Key Relationships > should have foreign key from oauth_accounts to users 10ms
 × tests/auth/database-schema.test.ts > Authentication Database Schema > Foreign Key Relationships > should have cascade delete on auth-related tables 12ms
   → expected 'SET NULL' to be 'CASCADE' // Object.is equality
 ✓ tests/github/github-client.test.ts > GitHubClient > initialization > should create client with minimal configuration 1ms
 ✓ tests/github/github-client.test.ts > GitHubClient > initialization > should create client with token authentication 0ms
 ✓ tests/github/github-client.test.ts > GitHubClient > initialization > should create client with GitHub App authentication 0ms
 ✓ tests/github/github-client.test.ts > GitHubClient > initialization > should accept custom base URL 0ms
 ✓ tests/github/github-client.test.ts > GitHubClient > initialization > should accept custom user agent 0ms
 ✓ tests/github/github-client.test.ts > GitHubClient > initialization > should throw error for invalid configuration 0ms
 × tests/github/github-client.test.ts > GitHubClient > REST API client > should make authenticated REST API requests 16ms
   → expected '' to deeply equal { login: 'testuser', id: 123 }
 × tests/github/github-client.test.ts > GitHubClient > REST API client > should handle REST API errors 16ms
   → promise resolved "{ url: undefined, status: 200, …(2) }" instead of rejecting
 × tests/github/github-client.test.ts > GitHubClient > REST API client > should respect custom base URL for REST requests 16ms
   → expected '' to deeply equal { login: 'enterprise-user', id: 456 }
 × tests/github/github-client.test.ts > GitHubClient > REST API client > should include custom headers in REST requests 15ms
   → Cannot read properties of undefined (reading 'user-agent')
 × tests/github/github-client.test.ts > GitHubClient > GraphQL client > should make authenticated GraphQL requests 1ms
   → expected undefined to deeply equal { viewer: { login: 'testuser', …(1) } }
 × tests/github/github-client.test.ts > GitHubClient > GraphQL client > should handle GraphQL errors 1ms
   → promise resolved "undefined" instead of rejecting
 × tests/github/github-client.test.ts > GitHubClient > GraphQL client > should pass variables to GraphQL queries 0ms
   → Cannot read properties of undefined (reading 'variables')
 × tests/github/github-client.test.ts > GitHubClient > GraphQL client > should respect custom base URL for GraphQL requests 0ms
   → Cannot read properties of undefined (reading 'viewer')
 × tests/github/github-client.test.ts > GitHubClient > error handling > should properly handle network errors 16ms
   → promise resolved "{ url: undefined, status: 200, …(2) }" instead of rejecting
 × tests/github/github-client.test.ts > GitHubClient > error handling > should handle authentication errors 16ms
   → promise resolved "{ url: undefined, status: 200, …(2) }" instead of rejecting
 × tests/github/github-client.test.ts > GitHubClient > error handling > should handle rate limit headers 16ms
   → expected undefined to be '4999' // Object.is equality
 × tests/github/github-client.test.ts > GitHubClient > request serialization > should properly serialize request payloads 1996ms
   → expected undefined to deeply equal { title: 'Test Issue', …(2) }
 × tests/github/github-client.test.ts > GitHubClient > request serialization > should handle response deserialization 15ms
   → expected '' to deeply equal { Object (number, title, ...) }
 ✓ tests/github/github-client.test.ts > GitHubClient > configuration options > should apply throttle configuration 0ms
 ✓ tests/github/github-client.test.ts > GitHubClient > configuration options > should apply retry configuration 0ms
 ✓ tests/github/github-client.test.ts > GitHubClient > configuration options > should apply cache configuration 1ms
 ✓ tests/github/github-client.test.ts > GitHubClient > configuration options > should apply log level configuration 0ms
 ✓ tests/github/caching.test.ts > GitHub Client Caching > Cache TTL and expiration > should expire cache entries after TTL using mock timer 1ms
 ✓ tests/github/caching.test.ts > GitHub Client Caching > Cache TTL and expiration > should handle concurrent cache operations without race conditions 1ms
 × tests/github/caching.test.ts > GitHub Client Caching > Cache TTL and expiration > should handle cache invalidation patterns correctly 17ms
   → expected undefined to be 'Original description' // Object.is equality
 × tests/github/caching.test.ts > GitHub Client Caching > Conditional requests with ETags > should handle 304 Not Modified responses correctly 15ms
   → expected undefined to be 100 // Object.is equality
 × tests/github/caching.test.ts > GitHub Client Caching > Conditional requests with ETags > should update cache when ETag changes 29ms
   → expected undefined to be 150 // Object.is equality
 × tests/github/caching.test.ts > GitHub Client Caching > Background refresh mechanism > should trigger background refresh when approaching TTL 15ms
   → expected undefined to be 100 // Object.is equality
 ✓ tests/github/caching.test.ts > GitHub Client Caching > Cache metrics and monitoring > should track cache hit/miss ratios accurately 0ms
 ✓ tests/github/caching.test.ts > GitHub Client Caching > Cache metrics and monitoring > should handle memory usage tracking 0ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > WebAuthn Tables > should have webauthn_credentials table 2ms
 × tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > WebAuthn Tables > should have correct webauthn_credentials columns 5ms
   → expected 'YES' to be 'NO' // Object.is equality
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > Authentication Challenges Table > should have auth_challenges table 1ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > Sessions Table > should have user_sessions table 1ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > OAuth Accounts Table > should have oauth_accounts table 1ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > Audit Logs Table > should have security_audit_logs table 1ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > User Consent Table > should have user_consents table for GDPR 1ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > Refresh Tokens Table > should have refresh_tokens table 1ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > Foreign Key Relationships > should have foreign key from webauthn_credentials to users 1ms
 ✓ tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > Foreign Key Relationships > should have foreign key from oauth_accounts to users 1ms
stdout | tests/auth/middleware.test.ts
Memory rate limiter initialized
Redis URL not provided, using in-memory rate limiting fallback

stderr | tests/auth/middleware.test.ts > Route Protection Middleware > Middleware Composition > should handle errors gracefully
Auth middleware error: Error: Database connection failed
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/auth/middleware.test.ts:968:45
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should allow public routes without authentication 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should allow auth routes without authentication 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should require authentication for protected routes 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should validate access token from Authorization header 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should validate access token from cookies 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should reject expired tokens 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should handle rate limiting 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should check maintenance mode 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should validate CSRF tokens for mutations 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should allow mutations with valid CSRF token 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > authMiddleware > should audit security events 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > requireAuth > should pass through authenticated requests 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > requireAuth > should reject unauthenticated requests 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > requireAuth > should support custom error messages 0ms
 × tests/auth/middleware.test.ts > Route Protection Middleware > requireConsent > should check required consents 2ms
   → mockCheckConsent.mockResolvedValueOnce is not a function
 × tests/auth/middleware.test.ts > Route Protection Middleware > requireConsent > should reject when consent is missing 0ms
   → mockCheckConsent.mockResolvedValueOnce is not a function
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > requireTwoFactor > should pass through for users with 2FA enabled 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > requireTwoFactor > should reject users without 2FA 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > rateLimit > should track requests by IP 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > rateLimit > should enforce rate limits 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > rateLimit > should support custom keys for rate limiting 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > Redis Rate Limiting > should use memory fallback when Redis URL not provided 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > Redis Rate Limiting > should provide rate limiter status information 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > Redis Rate Limiting > should handle Redis failures gracefully 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > Redis Rate Limiting > should properly handle rate limit exceeded from Redis 1ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > Redis Rate Limiting > should handle custom rate limit options 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > Redis Rate Limiting > should gracefully shutdown Redis connections 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > checkMaintenanceMode > should allow requests when not in maintenance 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > checkMaintenanceMode > should block requests during maintenance 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > checkMaintenanceMode > should allow admin bypass during maintenance 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > validateCSRF > should skip CSRF for safe methods 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > validateCSRF > should validate CSRF token from header 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > validateCSRF > should reject mismatched CSRF tokens 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > validateCSRF > should support double-submit cookie pattern 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > auditRequest > should log successful requests 0ms
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > auditRequest > should log failed requests with error details 0ms
 × tests/auth/middleware.test.ts > Route Protection Middleware > Middleware Composition > should compose multiple middleware functions 0ms
   → mockCheckConsent.mockResolvedValue is not a function
 ✓ tests/auth/middleware.test.ts > Route Protection Middleware > Middleware Composition > should handle errors gracefully 1ms
stdout | tests/auth/integration.test.ts
Memory rate limiter initialized
Redis URL not provided, using in-memory rate limiting fallback

 × tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should handle WebAuthn registration and authentication flow 4ms
   → [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "rpName"
    ],
    "message": "Required"
  }
]
 × tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should handle OAuth flow with PKCE and token encryption 3ms
   → The string to be decoded is not correctly encoded.
 ✓ tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should handle JWT token lifecycle with refresh rotation 4ms
 × tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should enforce GDPR compliance throughout auth flow 1ms
   → expected undefined to be true // Object.is equality
 × tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should audit all security events 0ms
   → expected 'mock-audit-log-id' to be 'audit-log-id' // Object.is equality
 ✓ tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should protect routes with middleware 1ms
 ✓ tests/auth/integration.test.ts > Authentication Integration Tests > Security Integration > should handle authentication failures with proper audit trail 0ms
 × tests/auth/integration.test.ts > Authentication Integration Tests > Security Integration > should detect and handle token reuse attacks 1ms
   → expected [Function] to throw error including 'Token reuse detected' but got 'Invalid refresh token'
 × tests/auth/integration.test.ts > Authentication Integration Tests > Security Integration > should enforce rate limiting across authentication methods 1ms
   → expected { …(3) } to be undefined
 ✓ tests/auth/integration.test.ts > Authentication Integration Tests > Cross-Component Integration > should support seamless auth method switching 1ms
 × tests/auth/integration.test.ts > Authentication Integration Tests > Cross-Component Integration > should maintain security context across all operations 1ms
   → [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "rpName"
    ],
    "message": "Required"
  }
]
 × tests/auth/oauth.test.ts > OAuth Authentication > OAuth URL Generation > should generate OAuth URL with PKCE parameters 2ms
   → expected 'test1234567890123456' to be 'Iv1234567890abcdef12' // Object.is equality
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth URL Generation > should store OAuth state in database 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth URL Generation > should include optional parameters when provided 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth Callback Validation > should validate callback with correct state and code 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth Callback Validation > should reject callback with invalid state 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth Callback Validation > should reject callback with expired state 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth Callback Validation > should reject callback with error parameter 0ms
 × tests/auth/oauth.test.ts > OAuth Authentication > Token Exchange > should exchange authorization code for tokens 1ms
   → expected "spy" to be called with arguments: [ …(2) ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -1,9 +1,9 @@[90m
[2m  [[22m
[2m    "https://github.com/login/oauth/access_token",[22m
[32m-   ObjectContaining {[90m
[32m-     "body": "{\"client_id\":\"Iv1234567890abcdef12\",\"client_secret\":\"ghp_1234567890abcdef1234567890abcdef12345678\",\"code\":\"auth-code-123\",\"redirect_uri\":\"http://localhost:3000/api/auth/github/callback\",\"code_verifier\":\"test-verifier-123\"}",[90m
[31m+   {[90m
[31m+     "body": "{\"client_id\":\"test1234567890123456\",\"client_secret\":\"test-github-client-secret-with-sufficient-length-for-testing\",\"code\":\"auth-code-123\",\"redirect_uri\":\"http://localhost:3000/api/auth/github/callback\",\"code_verifier\":\"test-verifier-123\"}",[90m
[2m      "headers": {[22m
[2m        "Accept": "application/json",[22m
[2m        "Content-Type": "application/json",[22m
[2m      },[22m
[2m      "method": "POST",[22m
[39m[90m

Number of calls: [1m1[22m
[39m
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > Token Exchange > should handle token exchange errors 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > Token Exchange > should fetch user profile and store OAuth account 1ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > Token Refresh > should refresh access token using refresh token 1ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > Token Refresh > should handle refresh token errors 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth Account Management > should unlink OAuth account 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > OAuth Account Management > should prevent unlinking last auth method 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > Security Features > should validate redirect URI against whitelist 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > Security Features > should encrypt tokens before storage 0ms
 ✓ tests/auth/oauth.test.ts > OAuth Authentication > Security Features > should log OAuth events in audit log 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Development Environment > should use localhost as default RP ID in development 1ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Development Environment > should include default localhost origins in development 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Development Environment > should include custom port when PORT is different 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Development Environment > should use explicit WEBAUTHN_RP_ID when provided 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Development Environment > should use explicit WEBAUTHN_ORIGINS when provided 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should reject localhost RP ID in production 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should reject HTTP origins in production (except localhost) 1ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should allow HTTP localhost in production for testing 0ms
 × tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should use VERCEL_URL when available 1ms
   → expected [ 'http://localhost:3000' ] to include 'https://app-prod.vercel.app'
 × tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should prefer NEXT_PUBLIC_VERCEL_URL over VERCEL_URL 0ms
   → expected [ 'http://localhost:3000' ] to include 'https://public.vercel.app'
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should require configuration when no URLs available 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Custom Configuration > should use custom RP name when provided 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Custom Configuration > should include NEXT_PUBLIC_APP_URL in origins when provided 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Custom Configuration > should parse comma-separated origins correctly 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Custom Configuration > should handle empty origins in comma-separated list 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Validation > should reject invalid domain formats for RP ID 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Validation > should reject invalid URL formats for origins 0ms
 × tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Validation > should require at least one origin 0ms
   → expected [Function] to throw an error
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Validation > should validate domain format with special characters 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Utility Functions > should correctly identify allowed origins 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Utility Functions > should return primary origin correctly 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Utility Functions > should use global config when no config provided to utilities 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Validation Function > should validate configuration without throwing on valid config 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Validation Function > should log error and rethrow on invalid config 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > New Configuration Properties > should handle WebAuthn timeout configuration 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > New Configuration Properties > should use default timeout when not specified 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > New Configuration Properties > should handle challenge expiry configuration 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > New Configuration Properties > should use default challenge expiry when not specified 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > New Configuration Properties > should handle supported algorithms configuration 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > New Configuration Properties > should use default algorithms when not specified 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > New Configuration Properties > should handle algorithm configuration with spaces 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Edge Cases > should handle missing environment variables gracefully 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Edge Cases > should handle malformed origins gracefully 0ms
 ✓ tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Edge Cases > should handle special domain cases 0ms
 ✓ tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query point calculation > should calculate points for simple queries 1ms
 ✓ tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query point calculation > should handle nested connections correctly 0ms
 ✓ tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query point calculation > should warn when approaching 500,000 node limit 1ms
 ✓ tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query optimization > should suggest query optimizations for high-point queries 1ms
 × tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query optimization > should automatically split queries that exceed limits 3ms
   → Cannot read properties of undefined (reading 'repository')
 × tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query batching with aliases > should batch multiple queries using aliases 1ms
   → Cannot read properties of undefined (reading 'data')
 × tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query batching with aliases > should respect point limits when batching 1ms
   → Cannot read properties of undefined (reading 'data')
 × tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Rate limit integration > should include rate limit info in GraphQL responses 0ms
   → Cannot read properties of undefined (reading 'rateLimit')
 × tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Rate limit integration > should automatically add rateLimit to queries when needed 0ms
   → Cannot read properties of undefined (reading 'query')
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should authenticate with valid configuration 1ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should throw error when authenticating without configuration 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should authenticate as GitHub App installation 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should handle authentication error for GitHub App 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should throw error when authenticating as installation without app config 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should use cached installation token when valid 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should refresh JWT token when expired 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > authentication methods > should refresh installation token when nearing expiration 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should provide GraphQL query optimization suggestions 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should calculate GraphQL points correctly 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should validate GraphQL point limits 1ms
 × tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should execute large GraphQL queries with pagination 2ms
   → expected undefined to be defined
 × tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should batch GraphQL queries 1ms
   → Cannot read properties of undefined (reading 'data')
 × tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should handle GraphQL queries with rate limit 1ms
   → Cannot read properties of undefined (reading 'rateLimit')
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > retry logic > should calculate retry delay with jitter 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > retry logic > should get retry configuration 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > retry logic > should execute operation with retry logic 3099ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > token rotation > should get token rotation configuration 1ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > token rotation > should add and remove tokens 1ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > token rotation > should throw error when adding token without rotation configured 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > token rotation > should get current token 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > token rotation > should validate tokens 1ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > cache operations > should generate cache key 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > cache operations > should throw error when generating cache key without cache configured 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > cache operations > should get cache metrics 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > cache operations > should warm cache for specified endpoints 17ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > DataLoader operations > should get repository loader 1ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > DataLoader operations > should handle DataLoader error gracefully 1ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > DataLoader operations > should clear DataLoader cache 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > configuration validation > should validate OAuth authentication type 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > configuration validation > should handle invalid auth type gracefully 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > configuration validation > should build throttle options with custom callbacks 0ms
 ✓ tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > configuration validation > should apply custom user agent 0ms
stdout | tests/database/monitoring.test.ts
Database tests using: postgresql://testuser:***@localhost:5432/testdb

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > getSlowQueries > should return slow queries array
Failed to get slow queries (pg_stat_statements may not be enabled): error: pg_stat_statements must be loaded via shared_preload_libraries
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getSlowQueries [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:70:22[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:41:23
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m147[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'55000'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [90mundefined[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'pg_stat_statements.c'[39m,
  line: [32m'1566'[39m,
  routine: [32m'pg_stat_statements_internal'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > getIndexUsageStats > should return index usage statistics
Failed to get index usage stats: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getIndexUsageStats [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:93:22[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:50:21
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > getVectorIndexMetrics > should return vector index metrics
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:66:23
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > getConnectionMetrics > should return connection metrics 14ms
 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > getSlowQueries > should return slow queries array 12ms
 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > getIndexUsageStats > should return index usage statistics 9ms
 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > getVectorIndexMetrics > should return vector index metrics 11ms
stderr | tests/database/monitoring.test.ts > DatabaseMonitor > checkDatabaseHealth > should perform comprehensive health check
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at DatabaseMonitorLocal.checkDatabaseHealth [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:224:29[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:97:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > checkDatabaseHealth > should verify database connectivity
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at DatabaseMonitorLocal.checkDatabaseHealth [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:224:29[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:115:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > getTableSizes > should return table size information 13ms
 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > checkDatabaseHealth > should perform comprehensive health check 29ms
 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > checkDatabaseHealth > should verify database connectivity 31ms
stderr | tests/database/monitoring.test.ts > DatabaseMonitor > checkDatabaseHealth > should check required extensions
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at DatabaseMonitorLocal.checkDatabaseHealth [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:224:29[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:126:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should generate comprehensive performance report
Failed to get index usage stats: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getIndexUsageStats [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:93:22[90m)[39m
    at async Promise.all (index 2)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:139:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should generate comprehensive performance report
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at async Promise.all (index 3)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:139:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should generate comprehensive performance report
Failed to get slow queries (pg_stat_statements may not be enabled): error: pg_stat_statements must be loaded via shared_preload_libraries
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getSlowQueries [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:70:22[90m)[39m
    at async Promise.all (index 1)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:139:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m147[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'55000'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [90mundefined[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'pg_stat_statements.c'[39m,
  line: [32m'1566'[39m,
  routine: [32m'pg_stat_statements_internal'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should generate comprehensive performance report
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at DatabaseMonitorLocal.checkDatabaseHealth [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:224:29[90m)[39m
    at async Promise.all (index 5)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:139:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > checkDatabaseHealth > should check required extensions 33ms
 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should generate comprehensive performance report 82ms
stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should include timestamp in report
Failed to get index usage stats: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getIndexUsageStats [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:93:22[90m)[39m
    at async Promise.all (index 2)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:152:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should include timestamp in report
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at async Promise.all (index 3)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:152:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should include timestamp in report
Failed to get slow queries (pg_stat_statements may not be enabled): error: pg_stat_statements must be loaded via shared_preload_libraries
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getSlowQueries [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:70:22[90m)[39m
    at async Promise.all (index 1)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:152:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m147[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'55000'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [90mundefined[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'pg_stat_statements.c'[39m,
  line: [32m'1566'[39m,
  routine: [32m'pg_stat_statements_internal'[39m
}

stderr | tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should include timestamp in report
Failed to get vector index metrics: error: column "tablename" does not exist
    at [90m/home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/pg@8.16.2/node_modules/[4mpg[24m/lib/client.js:545:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at DatabaseMonitorLocal.query [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:33:22[90m)[39m
    at DatabaseMonitorLocal.getVectorIndexMetrics [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:115:22[90m)[39m
    at DatabaseMonitorLocal.checkDatabaseHealth [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:224:29[90m)[39m
    at async Promise.all (index 5)
    at DatabaseMonitorLocal.generatePerformanceReport [90m(/home/bjorn/repos/agents/contribux/[39msrc/lib/monitoring/database-monitor-local.ts:260:9[90m)[39m
    at [90m/home/bjorn/repos/agents/contribux/[39mtests/database/monitoring.test.ts:152:22
    at [90mfile:///home/bjorn/repos/agents/contribux/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.2.4/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  length: [33m109[39m,
  severity: [32m'ERROR'[39m,
  code: [32m'42703'[39m,
  detail: [90mundefined[39m,
  hint: [90mundefined[39m,
  position: [32m'41'[39m,
  internalPosition: [90mundefined[39m,
  internalQuery: [90mundefined[39m,
  where: [90mundefined[39m,
  schema: [90mundefined[39m,
  table: [90mundefined[39m,
  column: [90mundefined[39m,
  dataType: [90mundefined[39m,
  constraint: [90mundefined[39m,
  file: [32m'parse_relation.c'[39m,
  line: [32m'3722'[39m,
  routine: [32m'errorMissingColumn'[39m
}

 ✓ tests/database/monitoring.test.ts > DatabaseMonitor > generatePerformanceReport > should include timestamp in report 80ms
stdout | tests/database/search.test.ts
Database tests using: postgresql://testuser:***@localhost:5432/testdb

 ✓ tests/database/search.test.ts > Hybrid Search Functions > hybrid_search_opportunities > should exist and be callable 10ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > hybrid_search_opportunities > should handle text-only search 11ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > hybrid_search_opportunities > should handle invalid parameters gracefully 11ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > hybrid_search_repositories > should exist and be callable 11ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > hybrid_search_repositories > should handle text search 14ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > search_similar_users > should exist and be callable 10ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > search_similar_users > should handle vector search with test embedding 13ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > find_matching_opportunities_for_user > should exist and be callable 10ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > find_matching_opportunities_for_user > should handle non-existent user gracefully 10ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > Vector Operations > should support halfvec operations 11ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > Vector Operations > should support vector similarity operations 10ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > Text Search Functions > should support trigram similarity 11ms
 ✓ tests/database/search.test.ts > Hybrid Search Functions > Text Search Functions > should support full-text search 10ms
stdout | tests/database/schema.test.ts
Database tests using: postgresql://testuser:***@localhost:5432/testdb

 ✓ tests/database/schema.test.ts > Database Schema > Extensions > should have required extensions installed 9ms
 ✓ tests/database/schema.test.ts > Database Schema > Extensions > should have pgvector extension with correct version 9ms
 ✓ tests/database/schema.test.ts > Database Schema > Tables > should have all required tables 12ms
 ✓ tests/database/schema.test.ts > Database Schema > Tables > should have halfvec columns in embedding tables 12ms
 ✓ tests/database/schema.test.ts > Database Schema > Enum Types > should have all required enum types 11ms
 ✓ tests/database/schema.test.ts > Database Schema > Indexes > should have HNSW indexes for vector columns 12ms
 ✓ tests/database/schema.test.ts > Database Schema > Indexes > should have GIN indexes for text search 11ms
 ✓ tests/database/schema.test.ts > Database Schema > Functions > should have update_updated_at_column trigger function 12ms
 ✓ tests/database/schema.test.ts > Database Schema > Functions > should have hybrid search functions 9ms
 ✓ tests/database/schema.test.ts > Database Schema > Triggers > should have updated_at triggers on relevant tables 11ms
 ✓ tests/validation/env.test.ts > Environment Validation > JWT Secret Validation > should accept a strong JWT secret 13ms
 ✓ tests/validation/env.test.ts > Environment Validation > JWT Secret Validation > should reject JWT secret that is too short 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > JWT Secret Validation > should reject JWT secret with low entropy 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > JWT Secret Validation > should reject JWT secret with insufficient unique characters 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > JWT Secret Validation > should provide test JWT secret in test environment 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Production Environment Validation > should require all necessary variables in production 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Production Environment Validation > should reject localhost RP_ID in production 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Production Environment Validation > should require encryption key in production 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Database URL Validation > should accept valid PostgreSQL URLs 9ms
 ✓ tests/validation/env.test.ts > Environment Validation > Database URL Validation > should reject invalid database URLs 8ms
 ✓ tests/validation/env.test.ts > Environment Validation > OAuth Configuration Validation > should validate GitHub client ID format 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > OAuth Configuration Validation > should reject invalid GitHub client ID format 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > OAuth Configuration Validation > should require OAuth credentials when OAuth is enabled in production 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > OAuth Configuration Validation > should allow missing OAuth credentials in development when OAuth is enabled 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > WebAuthn RP ID Validation > should accept valid domain formats 8ms
 ✓ tests/validation/env.test.ts > Environment Validation > WebAuthn RP ID Validation > should reject invalid domain formats 12ms
 ✓ tests/validation/env.test.ts > Environment Validation > Rate Limiting Validation > should enforce reasonable rate limits 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Redirect URI Validation > should validate redirect URI format 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Redirect URI Validation > should accept valid redirect URIs 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Utility Functions > should provide JWT secret for non-test environments 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Utility Functions > should provide test JWT secret for test environment 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Utility Functions > should generate encryption key for development 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Utility Functions > should require encryption key in production 2ms
 ✓ tests/validation/env.test.ts > Environment Validation > Startup Validation > should handle validation gracefully 2ms
stderr | tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should handle webhook retry with idempotency
Duplicate delivery ID: f47ac10b-58cc-4372-a567-0e02b2c3d479

stderr | tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should validate delivery ID format
Webhook event validation failed: [
  {
    "validation": "regex",
    "code": "invalid_string",
    "message": "Invalid UUID format for delivery ID",
    "path": [
      "deliveryId"
    ]
  }
]

 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Signature Validation > should validate a correct webhook signature 1ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Signature Validation > should reject an invalid webhook signature 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Signature Validation > should accept SHA1 signatures in non-strict mode 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Signature Validation > should reject SHA1 signatures in strict mode 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Signature Validation > should use timing-safe comparison to prevent timing attacks 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Signature Validation > should handle missing signature header 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Signature Validation > should handle malformed signature header 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Event Parsing > should parse issue opened event 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Event Parsing > should parse pull request event 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Event Parsing > should handle push events 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Event Parsing > should throw on invalid JSON payload 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should process valid webhook and route to correct handler 1ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should reject webhook with invalid signature 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should handle missing event handler gracefully 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should handle webhook retry with idempotency 1ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should validate delivery ID format 1ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should support webhook configuration 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should handle errors in event handlers 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Handler > should validate input parameters thoroughly 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Enhanced Security Features > should support configurable security options 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Enhanced Security Features > should handle UTF-8 payloads correctly 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Enhanced Security Features > should reject malformed hex signatures 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Webhook Types > should have proper TypeScript types for webhook events 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Event Parser Errors > should throw GitHubWebhookPayloadError for invalid payload types 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Event Parser Errors > should throw GitHubWebhookError for invalid headers 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Event Parser Errors > should throw GitHubWebhookPayloadError for empty payload 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Event Parser Errors > should throw GitHubWebhookPayloadError for invalid JSON 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Event Parser Errors > should throw GitHubWebhookError for missing headers 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Initialization Errors > should throw GitHubWebhookSignatureError for invalid secrets 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Initialization Errors > should throw GitHubWebhookError for invalid handlers 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Initialization Errors > should throw GitHubWebhookError for invalid options 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Processing Errors > should throw GitHubWebhookPayloadError for invalid payload 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Processing Errors > should throw GitHubWebhookError for invalid headers 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Processing Errors > should throw GitHubWebhookSignatureError for missing signature 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Processing Errors > should throw GitHubWebhookSignatureError for invalid signature 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Processing Errors > should handle payload size limits 29ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Webhook Handler Processing Errors > should throw GitHubWebhookError for handler execution failures 1ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Signature Validation Error Handling > should handle invalid signature formats gracefully 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Signature Validation Error Handling > should handle unsupported algorithms 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Signature Validation Error Handling > should handle invalid hex characters 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Signature Validation Error Handling > should handle edge cases in strict validation 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Error Message Consistency > should use consistent error types across modules 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Error Message Consistency > should provide detailed error information 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Cache Error Handling > should handle cache cleanup failures gracefully 0ms
 ✓ tests/github/webhook-validation.test.ts > GitHub Webhook Integration > Error Handling Consistency > Cache Error Handling > should handle cache clear failures gracefully 0ms
 ✓ tests/database/simple-vector.test.ts > Simple Vector Test > should connect to the test database 1ms
 ✓ tests/database/simple-vector.test.ts > Simple Vector Test > should have vector extension loaded 2ms
 ✓ tests/database/simple-vector.test.ts > Simple Vector Test > should have the users table with vector columns 4ms
 ✓ tests/database/simple-vector.test.ts > Simple Vector Test > should create and query vector data 13ms
 ✓ tests/database/simple-vector.test.ts > Simple Vector Test > should have HNSW indexes created 2ms
stdout | tests/database/connection.test.ts
Database tests using: postgresql://testuser:***@localhost:5432/testdb

 ✓ tests/database/connection.test.ts > Database Configuration > Connection URLs > should have test database URL configured 0ms
 ✓ tests/database/connection.test.ts > Database Configuration > Connection URLs > should point to a valid test database 0ms
 ✓ tests/database/connection.test.ts > Database Configuration > Environment Configuration > should have test environment variables 0ms
 ✓ tests/database/connection.test.ts > Database Configuration > Environment Configuration > should have vector search configuration 0ms
 ✓ tests/database/connection.test.ts > Database Configuration > Environment Configuration > should have database configuration 0ms
 ✓ tests/database/connection.test.ts > Database Connection > should successfully connect to database 9ms
 ✓ tests/database/connection.test.ts > Database Connection > should handle parameterized queries safely 11ms
 ✓ tests/database/connection.test.ts > Database Connection > should return database version 10ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Key Generation > should generate AES-GCM encryption key 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Key Generation > should export key to storable format 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Key Generation > should import key from stored format 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Token Encryption > should encrypt token with AES-GCM 2ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Token Encryption > should generate unique IV for each encryption 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Token Encryption > should include authentication tag 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Token Decryption > should decrypt token with correct key 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Token Decryption > should fail with wrong key 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Token Decryption > should fail with tampered ciphertext 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Token Decryption > should fail with tampered authentication tag 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Key Rotation > should rotate encryption keys 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Key Rotation > should re-encrypt tokens with new key 3ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Additional Data Authentication > should authenticate with additional data 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Additional Data Authentication > should fail with wrong additional data 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Encryption Performance > should handle large tokens efficiently 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Encryption Performance > should handle concurrent encryption operations 9ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Error Handling > should handle invalid base64 input 1ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Error Handling > should handle missing encryption parameters 0ms
 ✓ tests/auth/crypto.test.ts > Web Crypto API Token Encryption > Error Handling > should validate algorithm mismatch 1ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Splitting > should split queries that exceed the 500,000 node limit 2ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Splitting > should preserve query structure when splitting 1ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Splitting > should handle nested pagination correctly 1ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Batching > should batch multiple single-item queries into one query with aliases 0ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Batching > should handle queries with variables correctly 0ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Batching > should respect complexity limits when batching 12ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Optimization > should optimize queries by removing unnecessary fields 1ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Optimization > should optimize nested queries and connections 1ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Query Optimization > should add rate limit info if not present 0ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Cursor-based Pagination > should handle forward pagination correctly 0ms
 ✓ tests/github/query-optimization.test.ts > GraphQL Query Optimization > Cursor-based Pagination > should handle backward pagination correctly 0ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Deep Nested Query Splitting Refinements > should handle extremely deep nested connections with proper point calculation 4ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Deep Nested Query Splitting Refinements > should preserve cursor-based pagination in deeply nested queries 1ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Deep Nested Query Splitting Refinements > should handle queries with multiple connection types at the same level 1ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Duplicate Field Removal Logic Enhancement > should remove duplicates while preserving field order and structure 1ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Duplicate Field Removal Logic Enhancement > should handle duplicates in nested structures correctly 0ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Duplicate Field Removal Logic Enhancement > should preserve fields with comments when removing duplicates 0ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Edges Block Optimization When Nodes Exist > should remove edges block when nodes block is present and contains same fields 0ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Edges Block Optimization When Nodes Exist > should handle multiple connections with mixed edges/nodes patterns 0ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Edges Block Optimization When Nodes Exist > should preserve pageInfo when optimizing connections 1ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Complex Query Batching Edge Cases > should handle batching queries with different variable requirements 0ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Complex Query Batching Edge Cases > should split batches when complexity exceeds limits 4ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Complexity Calculation Edge Cases > should handle malformed queries gracefully 1ms
 ✓ tests/github/graphql-edge-cases.test.ts > GraphQL Optimization Edge Cases > Complexity Calculation Edge Cases > should calculate complexity correctly for fragment usage 0ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Generation with Jose > should generate a valid JWT with proper structure 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Generation with Jose > should include required JWT claims 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Generation with Jose > should use HS256 algorithm for signing 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Generation with Jose > should set proper expiration time 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Verification with Jose > should verify valid tokens 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Verification with Jose > should reject malformed tokens 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Verification with Jose > should reject tokens with invalid signature 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Verification with Jose > should include jti (JWT ID) for replay protection 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Access Token Verification with Jose > should generate unique JTI for each token 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Jose Library Security Features > should use cryptographically secure signatures 1ms
 ✓ tests/auth/jwt-jose.test.ts > JWT Jose Library Integration > Jose Library Security Features > should properly handle buffer conversion for secrets 1ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubClientError > should create basic client error 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubClientError > should be throwable and catchable 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubAuthenticationError > should create authentication error with default message 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubAuthenticationError > should create authentication error with custom message 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubAuthenticationError > should inherit from GitHubClientError 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubRateLimitError > should create rate limit error with all properties 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubRateLimitError > should have readonly properties 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubGraphQLError > should create GraphQL error with errors array 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubGraphQLError > should create GraphQL error without data 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubGraphQLError > should handle minimal error data 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubWebhookError > should create webhook error with reason 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubWebhookError > should accept all valid reason types 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubWebhookSignatureError > should create signature error with algorithm and signature 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubWebhookSignatureError > should create signature error with minimal data 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubWebhookPayloadError > should create payload error with size and parse error 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubWebhookPayloadError > should create payload error with minimal data 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubTokenExpiredError > should create token expired error with default message 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubTokenExpiredError > should create token expired error with custom message and expiry date 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubCacheError > should create cache error with operation type 0ms
 ✓ tests/github/github-errors.test.ts > GitHub Error Classes > GitHubCacheError > should accept all valid operation types 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isRequestError > should identify valid request errors 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isRequestError > should reject non-request errors 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isRequestError > should reject objects missing required properties 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isRateLimitError > should identify rate limit errors 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isRateLimitError > should reject non-rate-limit 403 errors 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isRateLimitError > should reject non-403 errors 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isRateLimitError > should handle missing headers 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isSecondaryRateLimitError > should identify secondary rate limit errors 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isSecondaryRateLimitError > should reject errors without retry-after header 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > isSecondaryRateLimitError > should reject non-403 errors even with retry-after 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should extract message from Error objects 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should extract message from custom error objects 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should return string errors as-is 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should extract message property from objects 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should handle null and undefined 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should handle objects without message 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should handle primitive values 0ms
 ✓ tests/github/github-errors.test.ts > Error Utility Functions > extractErrorMessage > should convert non-string message properties to strings 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should provide static error messages 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should provide dynamic error message functions 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should format webhook error messages 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should format DataLoader error messages 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should format API error messages 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should format webhook handler error messages 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should provide validation error messages 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should provide configuration error messages 0ms
 ✓ tests/github/github-errors.test.ts > ErrorMessages > should handle webhook validation errors 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Event Logging > should log security events with full context 2ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Event Logging > should handle events without user context 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Event Logging > should assign appropriate severity levels 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Authentication Logging > should log authentication attempts with device fingerprint 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Authentication Logging > should track failed login attempts 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Authentication Logging > should auto-lock account after threshold 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Session Activity Tracking > should log session creation and updates 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Session Activity Tracking > should detect session anomalies 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Data Access Logging > should log sensitive data access 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Data Access Logging > should track bulk data operations 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Configuration Changes > should log security configuration changes 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Configuration Changes > should require elevated privileges for critical changes 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Audit Log Queries > should retrieve audit logs with filters 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Audit Log Queries > should support pagination 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Security Metrics > should calculate security metrics 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Security Metrics > should track metrics over time 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Anomaly Detection > should detect unusual access patterns 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Anomaly Detection > should detect rapid succession events 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Audit Reporting > should generate audit report 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Audit Reporting > should support CSV export format 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Compliance Features > should ensure tamper-proof logging 0ms
 ✓ tests/auth/audit.test.ts > Security Audit Logging > Compliance Features > should retain critical logs according to policy 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Registration Flow > should generate registration options for a new user 1ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Registration Flow > should store challenge in database for verification 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Registration Flow > should verify registration response and store credential 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Registration Flow > should reject registration with invalid challenge 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Authentication Flow > should generate authentication options for existing user 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Authentication Flow > should verify authentication response 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Authentication Flow > should reject authentication with unknown credential 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Authentication Flow > should handle counter verification to prevent replay attacks 1ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Security Features > should expire challenges after 5 minutes 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Security Features > should validate origin for CSRF protection 1ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Security Features > should support multiple credentials per user 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Fallback Support > should detect WebAuthn support 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Fallback Support > should provide graceful fallback when WebAuthn not supported 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Configuration Support > should generate registration options with custom config 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Configuration Support > should generate authentication options with custom config 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Configuration Support > should validate origin in registration verification 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Configuration Support > should validate origin in authentication verification 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Configuration Support > should return client configuration 0ms
 ✓ tests/auth/webauthn.test.ts > WebAuthn Authentication > Configuration Support > should validate WebAuthn request parameters 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Consent Management > should record user consent with timestamp and context 1ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Consent Management > should handle multiple consent types 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Consent Management > should revoke consent 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Consent Management > should get current consent status 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Consent Management > should check if consent is required 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Consent Management > should detect outdated consent versions 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Portability > should export all user data in structured format 1ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Portability > should format export data as JSON 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Portability > should include export metadata 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Right to Erasure > should delete all user data permanently 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Right to Erasure > should require verification before deletion 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Right to Erasure > should log deletion event before removing audit logs 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Anonymization > should anonymize user data instead of deletion 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Anonymization > should preserve data relationships after anonymization 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Retention > should return data retention policy 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Retention > should identify data eligible for deletion 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Processing Logs > should log data processing activities 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Data Processing Logs > should track third-party data sharing 0ms
 ✓ tests/auth/gdpr.test.ts > GDPR Compliance Features > Consent UI Requirements > should provide granular consent options 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should batch requests correctly 1ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should cache results by default 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should handle errors correctly 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should respect maxBatchSize option 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should support loadMany method 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should support custom cache key function 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should support cache operations 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Basic functionality > should provide cache metrics 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > GitHub Repository DataLoader > should create a repository dataloader with correct configuration 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > GitHub Repository DataLoader > should batch repository requests correctly 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > GitHub Repository DataLoader > should handle GraphQL errors correctly 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > GitHub Repository DataLoader > should integrate with cache manager when provided 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > GitHub Repository DataLoader > should sanitize repository names for GraphQL 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > GitHub Repository DataLoader > should handle batch failures gracefully 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Error handling > should validate constructor parameters 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Error handling > should validate load parameters 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Error handling > should validate loadMany parameters 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Error handling > should handle batch function validation errors 0ms
 ✓ tests/github/dataloader.test.ts > DataLoader > Error handling > should handle cacheKeyFn errors 0ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token rotation strategies > should use round-robin strategy for token rotation 2ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token rotation strategies > should use least-used strategy for token rotation 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token rotation strategies > should use random strategy for token rotation 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token expiration handling > should detect tokens needing refresh using fake timers 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token expiration handling > should handle expired tokens gracefully using fake timers 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token health and quarantine > should quarantine tokens with high error rates using fake timers 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token health and quarantine > should recover from quarantine after timeout using fake timers 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token scopes and permissions > should track token scopes for personal access tokens 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token scopes and permissions > should select token based on required scopes 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Thread safety and concurrency > should handle concurrent token rotation safely 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Thread safety and concurrency > should manage token metrics properly using fake timers 1ms
 ✓ tests/github/token-rotation.test.ts > GitHub Token Rotation > Token rotation configuration > should allow dynamic token management 1ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Exponential backoff with jitter > should calculate retry delays with exponential backoff 1ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Exponential backoff with jitter > should add random jitter to prevent thundering herd 1ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Exponential backoff with jitter > should cap maximum retry delay 0ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Transient vs permanent error handling > should retry on transient 5xx server errors 0ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Transient vs permanent error handling > should not retry on permanent 4xx client errors 1ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Transient vs permanent error handling > should respect retry-after header with fake timers 1ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Transient vs permanent error handling > should handle concurrent retries without race conditions 1ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Circuit breaker pattern > should open circuit after threshold failures 1ms
 ✓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > Circuit breaker pattern > should recover from open state using fake timers 1ms
 ↓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > GraphQL error handling > should retry on GraphQL rate limit errors
 ↓ tests/github/retry-logic.test.ts > GitHub Client Retry Logic > GraphQL error handling > should not retry on GraphQL syntax errors
 ✓ tests/auth/pkce.test.ts > PKCE (Proof Key for Code Exchange) > should generate code verifier with correct length 1ms
 ✓ tests/auth/pkce.test.ts > PKCE (Proof Key for Code Exchange) > should generate code challenge using SHA-256 1ms
 ✓ tests/auth/pkce.test.ts > PKCE (Proof Key for Code Exchange) > should return both verifier and challenge 1ms
 ✓ tests/auth/pkce.test.ts > PKCE (Proof Key for Code Exchange) > should generate different values on each call 0ms
 ✓ tests/auth/pkce.test.ts > PKCE (Proof Key for Code Exchange) > should use crypto.subtle.digest for challenge generation 1ms
 ✓ tests/auth/pkce.test.ts > PKCE (Proof Key for Code Exchange) > should handle base64url encoding correctly 0ms
 ✓ tests/auth/pkce.test.ts > PKCE (Proof Key for Code Exchange) > should generate cryptographically secure values 1ms
 ✓ tests/github/github-app-auth.test.ts > GitHub App Authentication > Configuration > should create client with GitHub App configuration 1ms
 ✓ tests/github/github-app-auth.test.ts > GitHub App Authentication > Configuration > should create client with installation ID 1ms
 ✓ tests/github/github-app-auth.test.ts > GitHub App Authentication > Configuration > should support webhook secret configuration 0ms
 ✓ tests/github/github-app-auth.test.ts > GitHub App Authentication > OAuth configuration > should support OAuth app configuration 0ms
 ✓ tests/github/github-app-auth.test.ts > GitHub App Authentication > Multi-installation support > should support installation-specific configuration 0ms
 ✓ tests/github/github-app-auth.test.ts > GitHub App Authentication > Multi-installation support > should support caching with app authentication 1ms
 ✓ tests/github/github-app-auth.test.ts > GitHub App Authentication > Token expiration handling > should support token rotation configuration 1ms
 ✓ tests/github/memory-cleanup-integration.test.ts > GitHub Client Memory Cleanup - Component Tests > CacheManager cleanup > should clear timer when destroyed 1ms
 ✓ tests/github/memory-cleanup-integration.test.ts > GitHub Client Memory Cleanup - Component Tests > RateLimitManager cleanup - simple version > should reset state when reset is called 0ms
 ✓ tests/github/memory-cleanup-integration.test.ts > GitHub Client Memory Cleanup - Component Tests > RetryManager cleanup - simple version > should handle retry logic correctly 0ms
 ✓ tests/github/memory-cleanup-integration.test.ts > GitHub Client Memory Cleanup - Component Tests > TokenRotationManager cleanup > should clear all tokens and state 0ms
 ✓ tests/github/memory-cleanup.test.ts > GitHubClient - Memory Cleanup > should have a destroy method 0ms
 ✓ tests/github/memory-cleanup.test.ts > GitHubClient - Memory Cleanup > destroy method should be async 0ms
Sourcemap for "/home/bjorn/repos/agents/contribux/.next/server/edge-runtime-webpack.js" points to missing source files

⎯⎯⎯⎯⎯⎯ Failed Tests 53 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/auth/database-schema-isolated.test.ts > Authentication Database Schema (Isolated) > WebAuthn Tables > should have correct webauthn_credentials columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema-isolated.test.ts:89:38
     87|         if (column) {
     88|           expect(column.data_type).toContain(expected.data_type)
     89|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
     90|         }
     91|       })
 ❯ tests/auth/database-schema-isolated.test.ts:84:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > WebAuthn Tables > should have correct webauthn_credentials columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema.test.ts:69:38
     67|         if (column && typeof column === 'object' && 'data_type' in col…
     68|           expect(column.data_type).toContain(expected.data_type)
     69|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
     70|         }
     71|       })
 ❯ tests/auth/database-schema.test.ts:64:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > Authentication Challenges Table > should have correct auth_challenges columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema.test.ts:123:38
    121|         if (column && typeof column === 'object' && 'data_type' in col…
    122|           expect(column.data_type).toContain(expected.data_type)
    123|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
    124|         }
    125|       })
 ❯ tests/auth/database-schema.test.ts:118:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > Sessions Table > should have correct user_sessions columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema.test.ts:165:38
    163|         if (column && typeof column === 'object' && 'data_type' in col…
    164|           expect(column.data_type).toContain(expected.data_type)
    165|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
    166|         }
    167|       })
 ❯ tests/auth/database-schema.test.ts:160:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > OAuth Accounts Table > should have correct oauth_accounts columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema.test.ts:210:38
    208|         if (column && typeof column === 'object' && 'data_type' in col…
    209|           expect(column.data_type).toContain(expected.data_type)
    210|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
    211|         }
    212|       })
 ❯ tests/auth/database-schema.test.ts:205:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > Audit Logs Table > should have correct security_audit_logs columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema.test.ts:265:38
    263|         if (column && typeof column === 'object' && 'data_type' in col…
    264|           expect(column.data_type).toContain(expected.data_type)
    265|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
    266|         }
    267|       })
 ❯ tests/auth/database-schema.test.ts:260:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > User Consent Table > should have correct user_consents columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema.test.ts:318:38
    316|         if (column && typeof column === 'object' && 'data_type' in col…
    317|           expect(column.data_type).toContain(expected.data_type)
    318|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
    319|         }
    320|       })
 ❯ tests/auth/database-schema.test.ts:313:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > Refresh Tokens Table > should have correct refresh_tokens columns
AssertionError: expected 'YES' to be 'NO' // Object.is equality

Expected: [32m"NO"[39m
Received: [31m"YES"[39m

 ❯ tests/auth/database-schema.test.ts:360:38
    358|         if (column && typeof column === 'object' && 'data_type' in col…
    359|           expect(column.data_type).toContain(expected.data_type)
    360|           expect(column.is_nullable).toBe(expected.is_nullable)
       |                                      ^
    361|         }
    362|       })
 ❯ tests/auth/database-schema.test.ts:355:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/53]⎯

 FAIL  tests/auth/database-schema.test.ts > Authentication Database Schema > Foreign Key Relationships > should have cascade delete on auth-related tables
AssertionError: expected 'SET NULL' to be 'CASCADE' // Object.is equality

Expected: [32m"CASCADE"[39m
Received: [31m"SET NULL"[39m

 ❯ tests/auth/database-schema.test.ts:414:39
    412|       if (Array.isArray(cascades)) {
    413|         cascades.forEach(cascade => {
    414|           expect(cascade.delete_rule).toBe('CASCADE')
       |                                       ^
    415|         })
    416|       }
 ❯ tests/auth/database-schema.test.ts:413:18

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/53]⎯

 FAIL  tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should handle WebAuthn registration and authentication flow
ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "rpName"
    ],
    "message": "Required"
  }
]
 ❯ Object.get error [as error] node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/types.js:39:31
 ❯ ZodObject.parse node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/types.js:114:22
 ❯ getWebAuthnConfig src/lib/auth/webauthn-config.ts:172:31
    170|   }
    171| 
    172|   return WebAuthnConfigSchema.parse(config)
       |                               ^
    173| }
    174| 
 ❯ Module.generateRegistrationOptions src/lib/auth/webauthn.ts:42:36
 ❯ tests/auth/integration.test.ts:112:32

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { issues: [ { code: 'invalid_type', expected: 'string', received: 'undefined', path: [ 'rpName' ], message: 'Required' } ], addIssue: 'Function<anonymous>', addIssues: 'Function<anonymous>', errors: [ { code: 'invalid_type', expected: 'string', received: 'undefined', path: [ 'rpName' ], message: 'Required' } ], format: 'Function<format>', isEmpty: false, flatten: 'Function<flatten>', formErrors: { formErrors: [], fieldErrors: { rpName: [ 'Required' ] } } }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/53]⎯

 FAIL  tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should handle OAuth flow with PKCE and token encryption
InvalidCharacterError: The string to be decoded is not correctly encoded.
 ❯ base64Decode src/lib/auth/crypto.ts:391:18
    389| 
    390| function base64Decode(str: string): Uint8Array {
    391|   const binary = atob(str)
       |                  ^
    392|   const bytes = new Uint8Array(binary.length)
    393|   for (let i = 0; i < binary.length; i++) {
 ❯ importKey src/lib/auth/crypto.ts:66:19
 ❯ getCurrentEncryptionKey src/lib/auth/crypto.ts:358:21
 ❯ Module.encryptOAuthToken src/lib/auth/crypto.ts:415:19
 ❯ tests/auth/integration.test.ts:206:25

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 5, INDEX_SIZE_ERR: 1, DOMSTRING_SIZE_ERR: 2, HIERARCHY_REQUEST_ERR: 3, WRONG_DOCUMENT_ERR: 4, INVALID_CHARACTER_ERR: 5, NO_DATA_ALLOWED_ERR: 6, NO_MODIFICATION_ALLOWED_ERR: 7, NOT_FOUND_ERR: 8, NOT_SUPPORTED_ERR: 9, INUSE_ATTRIBUTE_ERR: 10, INVALID_STATE_ERR: 11, SYNTAX_ERR: 12, INVALID_MODIFICATION_ERR: 13, NAMESPACE_ERR: 14, INVALID_ACCESS_ERR: 15, VALIDATION_ERR: 16, TYPE_MISMATCH_ERR: 17, SECURITY_ERR: 18, NETWORK_ERR: 19, ABORT_ERR: 20, URL_MISMATCH_ERR: 21, QUOTA_EXCEEDED_ERR: 22, TIMEOUT_ERR: 23, INVALID_NODE_TYPE_ERR: 24, DATA_CLONE_ERR: 25 }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/53]⎯

 FAIL  tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should enforce GDPR compliance throughout auth flow
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/auth/integration.test.ts:291:37
    289|       const consents = await getUserConsents(mockUser.id)
    290|       const termsConsent = Array.isArray(consents) ? consents.find(c =…
    291|       expect(termsConsent?.granted).toBe(true)
       |                                     ^
    292|       
    293|       // Export user data

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/53]⎯

 FAIL  tests/auth/integration.test.ts > Authentication Integration Tests > Complete Authentication Flow > should audit all security events
AssertionError: expected 'mock-audit-log-id' to be 'audit-log-id' // Object.is equality

Expected: [32m"audit-log-id"[39m
Received: [31m"[7mmock-[27maudit-log-id"[39m

 ❯ tests/auth/integration.test.ts:331:27
    329|       })
    330|       
    331|       expect(auditLog.id).toBe('audit-log-id')
       |                           ^
    332|       expect(auditLog.event_type).toBe('login_success')
    333|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/53]⎯

 FAIL  tests/auth/integration.test.ts > Authentication Integration Tests > Security Integration > should detect and handle token reuse attacks
AssertionError: expected [Function] to throw error including 'Token reuse detected' but got 'Invalid refresh token'

Expected: [32m"Token reuse detected"[39m
Received: [31m"Invalid refresh token"[39m

 ❯ tests/auth/integration.test.ts:450:7
    448|       mockSql.mockResolvedValueOnce([]) // Revoke all tokens
    449|       
    450|       await expect(rotateRefreshToken(refreshToken)).rejects.toThrow('…
       |       ^
    451|     })
    452| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/53]⎯

 FAIL  tests/auth/integration.test.ts > Authentication Integration Tests > Security Integration > should enforce rate limiting across authentication methods
AssertionError: expected { …(3) } to be undefined

[32m- Expected:[39m 
undefined

[31m+ Received:[39m 
{
  "data": {
    "error": "Authentication required",
  },
  "init": {
    "status": 401,
  },
  "type": "json",
}

 ❯ tests/auth/integration.test.ts:468:28
    466|           // First 4 attempts should pass
    467|           const response = await authMiddleware(request)
    468|           expect(response).toBeUndefined()
       |                            ^
    469|         } else {
    470|           // 5th attempt should be rate limited

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/53]⎯

 FAIL  tests/auth/integration.test.ts > Authentication Integration Tests > Cross-Component Integration > should maintain security context across all operations
ZodError: [
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "rpName"
    ],
    "message": "Required"
  }
]
 ❯ Object.get error [as error] node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/types.js:39:31
 ❯ ZodObject.parse node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/types.js:114:22
 ❯ getWebAuthnConfig src/lib/auth/webauthn-config.ts:172:31
    170|   }
    171| 
    172|   return WebAuthnConfigSchema.parse(config)
       |                               ^
    173| }
    174| 
 ❯ Module.generateRegistrationOptions src/lib/auth/webauthn.ts:42:36
 ❯ tests/auth/integration.test.ts:546:13

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { issues: [ { code: 'invalid_type', expected: 'string', received: 'undefined', path: [ 'rpName' ], message: 'Required' } ], addIssue: 'Function<anonymous>', addIssues: 'Function<anonymous>', errors: [ { code: 'invalid_type', expected: 'string', received: 'undefined', path: [ 'rpName' ], message: 'Required' } ], format: 'Function<format>', isEmpty: false, flatten: 'Function<flatten>', formErrors: { formErrors: [], fieldErrors: { rpName: [ 'Required' ] } } }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/53]⎯

 FAIL  tests/auth/middleware.test.ts > Route Protection Middleware > requireConsent > should check required consents
TypeError: mockCheckConsent.mockResolvedValueOnce is not a function
 ❯ tests/auth/middleware.test.ts:500:24
    498|     it('should check required consents', async () => {
    499|       const mockCheckConsent = vi.mocked(checkConsentRequired)
    500|       mockCheckConsent.mockResolvedValueOnce(false) // Consent granted
       |                        ^
    501|       
    502|       const request = new NextRequest('http://localhost:3000/api/user')

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/53]⎯

 FAIL  tests/auth/middleware.test.ts > Route Protection Middleware > requireConsent > should reject when consent is missing
TypeError: mockCheckConsent.mockResolvedValueOnce is not a function
 ❯ tests/auth/middleware.test.ts:519:24
    517|     it('should reject when consent is missing', async () => {
    518|       const mockCheckConsent = vi.mocked(checkConsentRequired)
    519|       mockCheckConsent.mockResolvedValueOnce(true) // Consent required
       |                        ^
    520|       
    521|       const request = new NextRequest('http://localhost:3000/api/user')

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/53]⎯

 FAIL  tests/auth/middleware.test.ts > Route Protection Middleware > Middleware Composition > should compose multiple middleware functions
TypeError: mockCheckConsent.mockResolvedValue is not a function
 ❯ tests/auth/middleware.test.ts:947:24
    945|       
    946|       const mockCheckConsent = vi.mocked(checkConsentRequired)
    947|       mockCheckConsent.mockResolvedValue(false)
       |                        ^
    948|       
    949|       const request = new NextRequest('http://localhost:3000/api/prote…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/53]⎯

 FAIL  tests/auth/oauth.test.ts > OAuth Authentication > OAuth URL Generation > should generate OAuth URL with PKCE parameters
AssertionError: expected 'test1234567890123456' to be 'Iv1234567890abcdef12' // Object.is equality

Expected: [32m"[7mIv[27m1234567890[7mabcdef12[27m"[39m
Received: [31m"[7mtest[27m1234567890[7m123456[27m"[39m

 ❯ tests/auth/oauth.test.ts:95:49
     93|       // Verify URL contains required parameters
     94|       const url = new URL(result.url)
     95|       expect(url.searchParams.get('client_id')).toBe(mockConfig.client…
       |                                                 ^
     96|       expect(url.searchParams.get('redirect_uri')).toBe(mockConfig.red…
     97|       expect(url.searchParams.get('scope')).toBe('user:email read:user…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/53]⎯

 FAIL  tests/auth/oauth.test.ts > OAuth Authentication > Token Exchange > should exchange authorization code for tokens
AssertionError: expected "spy" to be called with arguments: [ …(2) ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -1,9 +1,9 @@[90m
[2m  [[22m
[2m    "https://github.com/login/oauth/access_token",[22m
[32m-   ObjectContaining {[90m
[32m-     "body": "{\"client_id\":\"Iv1234567890abcdef12\",\"client_secret\":\"ghp_1234567890abcdef1234567890abcdef12345678\",\"code\":\"auth-code-123\",\"redirect_uri\":\"http://localhost:3000/api/auth/github/callback\",\"code_verifier\":\"test-verifier-123\"}",[90m
[31m+   {[90m
[31m+     "body": "{\"client_id\":\"test1234567890123456\",\"client_secret\":\"test-github-client-secret-with-sufficient-length-for-testing\",\"code\":\"auth-code-123\",\"redirect_uri\":\"http://localhost:3000/api/auth/github/callback\",\"code_verifier\":\"test-verifier-123\"}",[90m
[2m      "headers": {[22m
[2m        "Accept": "application/json",[22m
[2m        "Content-Type": "application/json",[22m
[2m      },[22m
[2m      "method": "POST",[22m
[39m[90m

Number of calls: [1m1[22m
[39m
 ❯ tests/auth/oauth.test.ts:247:25
    245| 
    246|       // Verify fetch was called with correct parameters
    247|       expect(mockFetch).toHaveBeenCalledWith(
       |                         ^
    248|         'https://github.com/login/oauth/access_token',
    249|         expect.objectContaining({

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/53]⎯

 FAIL  tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should use VERCEL_URL when available
AssertionError: expected [ 'http://localhost:3000' ] to include 'https://app-prod.vercel.app'
 ❯ tests/auth/webauthn-config.test.ts:158:30
    156|       
    157|       expect(config.rpId).toBe('app-prod.vercel.app')
    158|       expect(config.origins).toContain('https://app-prod.vercel.app')
       |                              ^
    159|     })
    160| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/53]⎯

 FAIL  tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Production Environment > should prefer NEXT_PUBLIC_VERCEL_URL over VERCEL_URL
AssertionError: expected [ 'http://localhost:3000' ] to include 'https://public.vercel.app'
 ❯ tests/auth/webauthn-config.test.ts:168:30
    166|       
    167|       expect(config.rpId).toBe('public.vercel.app')
    168|       expect(config.origins).toContain('https://public.vercel.app')
       |                              ^
    169|     })
    170| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/53]⎯

 FAIL  tests/auth/webauthn-config.test.ts > WebAuthn Configuration > Validation > should require at least one origin
AssertionError: expected [Function] to throw an error

[32m- Expected:[39m 
null

[31m+ Received:[39m 
undefined

 ❯ tests/auth/webauthn-config.test.ts:239:41
    237|       env.WEBAUTHN_ORIGINS = ''
    238|       
    239|       expect(() => getWebAuthnConfig()).toThrow('At least one WebAuthn…
       |                                         ^
    240|     })
    241| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/53]⎯

 FAIL  tests/database/vector-search.test.ts > Vector Search Integration > User Profile Vector Search > should find similar user profiles using HNSW index
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ tests/database/vector-search.test.ts:78:32
     76|       expect(result.executionTime).toBeLessThan(100); // Should be fas…
     77|       expect(result.topSimilarity).toBeGreaterThan(0.8); // Should fin…
     78|       expect(result.indexUsed).toBe(true); // Should use HNSW index
       |                                ^
     79| 
     80|       // Get actual results to verify ordering

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/53]⎯

 FAIL  tests/database/vector-search.test.ts > Vector Search Integration > User Profile Vector Search > should handle edge cases in vector search
Error: Edge case query 'edge_case_zeros' failed: expected NaN to be greater than or equal to -1
 ❯ tests/database/vector-search.test.ts:130:17
    128|           }
    129|         } catch (error) {
    130|           throw new Error(`Edge case query '${queryType}' failed: ${(e…
       |                 ^
    131|         }
    132|       }

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/53]⎯

 FAIL  tests/database/vector-search.test.ts > Vector Search Integration > Opportunity Vector Search > should find opportunities with similar titles and descriptions
error: operator does not exist: double precision <=> halfvec
 ❯ node_modules/.pnpm/pg@8.16.2/node_modules/pg/lib/client.js:545:17
 ❯ executeSql tests/database/db-client.ts:24:22
     22|     try {
     23|       await client.connect();
     24|       const result = await client.query(query, params);
       |                      ^
     25|       return result.rows;
     26|     } finally {
 ❯ tests/database/vector-search.test.ts:272:30

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { length: 214, severity: 'ERROR', code: '42883', detail: undefined, hint: 'No operator matches the given name and argument types. You might need to add explicit type casts.', position: '102', internalPosition: undefined, internalQuery: undefined, where: undefined, schema: undefined, table: undefined, dataType: undefined, constraint: undefined, file: 'parse_oper.c', routine: 'op_error' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/53]⎯

 FAIL  tests/database/vector-search.test.ts > Vector Search Integration > Vector Index Performance > should demonstrate HNSW index performance benefits
error: duplicate key value violates unique constraint "users_github_id_key"
 ❯ node_modules/.pnpm/pg@8.16.2/node_modules/pg/lib/client.js:545:17
 ❯ executeSql tests/database/db-client.ts:24:22
     22|     try {
     23|       await client.connect();
     24|       const result = await client.query(query, params);
       |                      ^
     25|       return result.rows;
     26|     } finally {
 ❯ tests/database/vector-search.test.ts:388:9

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { length: 210, severity: 'ERROR', code: '23505', detail: 'Key (github_id)=(800000) already exists.', hint: undefined, position: undefined, internalPosition: undefined, internalQuery: undefined, where: undefined, schema: 'public', table: 'users', dataType: undefined, constraint: 'users_github_id_key', file: 'nbtinsert.c', routine: '_bt_check_unique' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/53]⎯

 FAIL  tests/github/caching.test.ts > GitHub Client Caching > Cache TTL and expiration > should handle cache invalidation patterns correctly
AssertionError: expected undefined to be 'Original description' // Object.is equality

[32m- Expected:[39m 
"Original description"

[31m+ Received:[39m 
undefined

 ❯ tests/github/caching.test.ts:107:40
    105| 
    106|       const result1 = await client.rest.repos.get({ owner: 'owner', re…
    107|       expect(result1.data.description).toBe('Original description')
       |                                        ^
    108| 
    109|       // Second GET request - should use cache, no HTTP call

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/53]⎯

 FAIL  tests/github/caching.test.ts > GitHub Client Caching > Conditional requests with ETags > should handle 304 Not Modified responses correctly
AssertionError: expected undefined to be 100 // Object.is equality

[32m- Expected:[39m 
100

[31m+ Received:[39m 
undefined

 ❯ tests/github/caching.test.ts:156:45
    154| 
    155|       const result1 = await client.rest.repos.get({ owner: 'owner', re…
    156|       expect(result1.data.stargazers_count).toBe(100)
       |                                             ^
    157| 
    158|       // Second request sends If-None-Match header

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/53]⎯

 FAIL  tests/github/caching.test.ts > GitHub Client Caching > Conditional requests with ETags > should update cache when ETag changes
AssertionError: expected undefined to be 150 // Object.is equality

[32m- Expected:[39m 
150

[31m+ Received:[39m 
undefined

 ❯ tests/github/caching.test.ts:198:44
    196| 
    197|       const result = await client.rest.repos.get({ owner: 'owner', rep…
    198|       expect(result.data.stargazers_count).toBe(150)
       |                                            ^
    199| 
    200|       // Verify new ETag is used for subsequent requests

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/53]⎯

 FAIL  tests/github/caching.test.ts > GitHub Client Caching > Background refresh mechanism > should trigger background refresh when approaching TTL
AssertionError: expected undefined to be 100 // Object.is equality

[32m- Expected:[39m 
100

[31m+ Received:[39m 
undefined

 ❯ tests/github/caching.test.ts:258:45
    256| 
    257|       const result1 = await client.rest.repos.get({ owner: 'owner', re…
    258|       expect(result1.data.stargazers_count).toBe(100)
       |                                             ^
    259| 
    260|       // Advance time to 85% of TTL (past threshold)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/53]⎯

 FAIL  tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should execute large GraphQL queries with pagination
AssertionError: expected undefined to be defined
 ❯ tests/github/github-client-comprehensive.test.ts:243:22
    241| 
    242|       const result = await client.executeLargeGraphQLQuery(query, { ma…
    243|       expect(result).toBeDefined()
       |                      ^
    244|       expect(callCount).toBe(1)
    245|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/53]⎯

 FAIL  tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should batch GraphQL queries
TypeError: Cannot read properties of undefined (reading 'data')
 ❯ GitHubClient.batchGraphQLQueries src/lib/github/client/index.ts:1072:19
    1070|     // Execute single batched query
    1071|     const result = (await this.graphql(batchedQuery)) as Record<string…
    1072|     return result.data || result
       |                   ^
    1073|   }
    1074| 
 ❯ tests/github/github-client-comprehensive.test.ts:272:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/53]⎯

 FAIL  tests/github/github-client-comprehensive.test.ts > GitHubClient - Comprehensive Coverage > GraphQL query optimization > should handle GraphQL queries with rate limit
TypeError: Cannot read properties of undefined (reading 'rateLimit')
 ❯ GitHubClient.graphqlWithRateLimit src/lib/github/client/index.ts:1114:21
    1112| 
    1113|     const typedResult = result as Record<string, unknown> & { rateLimi…
    1114|     if (typedResult.rateLimit) {
       |                     ^
    1115|       this.rateLimitManager.updateFromGraphQLResponse(typedResult.rate…
    1116|     }
 ❯ tests/github/github-client-comprehensive.test.ts:299:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[35/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > REST API client > should make authenticated REST API requests
AssertionError: expected '' to deeply equal { login: 'testuser', id: 123 }

[32m- Expected:[39m 
{
  "id": 123,
  "login": "testuser",
}

[31m+ Received:[39m 
""

 ❯ tests/github/github-client.test.ts:90:25
     88| 
     89|       const user = await client.rest.users.getAuthenticated()
     90|       expect(user.data).toEqual(mockUser)
       |                         ^
     91|     })
     92| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[36/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > REST API client > should handle REST API errors
AssertionError: promise resolved "{ url: undefined, status: 200, …(2) }" instead of rejecting

[32m- Expected[39m
[31m+ Received[39m

[32m- Error {[39m
[32m-   "message": "rejected promise",[39m
[31m+ {[39m
[31m+   "data": "",[39m
[31m+   "headers": {},[39m
[31m+   "status": 200,[39m
[31m+   "url": undefined,[39m
[2m  }[22m

 ❯ tests/github/github-client.test.ts:105:56
    103|       })
    104| 
    105|       await expect(client.rest.users.getAuthenticated()).rejects.toThr…
       |                                                        ^
    106|     })
    107| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[37/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > REST API client > should respect custom base URL for REST requests
AssertionError: expected '' to deeply equal { login: 'enterprise-user', id: 456 }

[32m- Expected:[39m 
{
  "id": 456,
  "login": "enterprise-user",
}

[31m+ Received:[39m 
""

 ❯ tests/github/github-client.test.ts:121:25
    119| 
    120|       const user = await client.rest.users.getAuthenticated()
    121|       expect(user.data).toEqual(mockUser)
       |                         ^
    122|     })
    123| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[38/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > REST API client > should include custom headers in REST requests
TypeError: Cannot read properties of undefined (reading 'user-agent')
 ❯ tests/github/github-client.test.ts:140:14
    138| 
    139|       await client.rest.users.getAuthenticated()
    140|       expect(capturedHeaders['user-agent']).toContain('contribux-test/…
       |              ^
    141|     })
    142|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[39/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > GraphQL client > should make authenticated GraphQL requests
AssertionError: expected undefined to deeply equal { viewer: { login: 'testuser', …(1) } }

[32m- Expected:[39m 
{
  "viewer": {
    "login": "testuser",
    "name": "Test User",
  },
}

[31m+ Received:[39m 
undefined

 ❯ tests/github/github-client.test.ts:160:22
    158|       const query = `query { viewer { login name } }`
    159|       const result = await client.graphql(query)
    160|       expect(result).toEqual(mockResponse)
       |                      ^
    161|     })
    162| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[40/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > GraphQL client > should handle GraphQL errors
AssertionError: promise resolved "undefined" instead of rejecting

[32m- Expected:[39m 
Error {
  "message": "rejected promise",
}

[31m+ Received:[39m 
undefined

 ❯ tests/github/github-client.test.ts:178:41
    176| 
    177|       const query = `query { viewer { invalidField } }`
    178|       await expect(client.graphql(query)).rejects.toThrow()
       |                                         ^
    179|     })
    180| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[41/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > GraphQL client > should pass variables to GraphQL queries
TypeError: Cannot read properties of undefined (reading 'variables')
 ❯ tests/github/github-client.test.ts:201:27
    199|       
    200|       await client.graphql(query, variables)
    201|       expect(capturedBody.variables).toEqual(variables)
       |                           ^
    202|     })
    203| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[42/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > GraphQL client > should respect custom base URL for GraphQL requests
TypeError: Cannot read properties of undefined (reading 'viewer')
 ❯ tests/github/github-client.test.ts:215:30
    213| 
    214|       const result = await client.graphql(`query { viewer { login } }`)
    215|       expect((result as any).viewer?.login).toBe('enterprise-user')
       |                              ^
    216|     })
    217|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[43/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > error handling > should properly handle network errors
AssertionError: promise resolved "{ url: undefined, status: 200, …(2) }" instead of rejecting

[32m- Expected[39m
[31m+ Received[39m

[32m- Error {[39m
[32m-   "message": "rejected promise",[39m
[31m+ {[39m
[31m+   "data": "",[39m
[31m+   "headers": {},[39m
[31m+   "status": 200,[39m
[31m+   "url": undefined,[39m
[2m  }[22m

 ❯ tests/github/github-client.test.ts:229:56
    227|       })
    228| 
    229|       await expect(client.rest.users.getAuthenticated()).rejects.toThr…
       |                                                        ^
    230|     })
    231| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[44/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > error handling > should handle authentication errors
AssertionError: promise resolved "{ url: undefined, status: 200, …(2) }" instead of rejecting

[32m- Expected[39m
[31m+ Received[39m

[32m- Error {[39m
[32m-   "message": "rejected promise",[39m
[31m+ {[39m
[31m+   "data": "",[39m
[31m+   "headers": {},[39m
[31m+   "status": 200,[39m
[31m+   "url": undefined,[39m
[2m  }[22m

 ❯ tests/github/github-client.test.ts:244:56
    242|       })
    243| 
    244|       await expect(client.rest.users.getAuthenticated()).rejects.toThr…
       |                                                        ^
    245|     })
    246| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[45/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > error handling > should handle rate limit headers
AssertionError: expected undefined to be '4999' // Object.is equality

[32m- Expected:[39m 
"4999"

[31m+ Received:[39m 
undefined

 ❯ tests/github/github-client.test.ts:264:57
    262| 
    263|       const response = await client.rest.users.getAuthenticated()
    264|       expect(response.headers['x-ratelimit-remaining']).toBe('4999')
       |                                                         ^
    265|     })
    266|   })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[46/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > request serialization > should properly serialize request payloads
AssertionError: expected undefined to deeply equal { title: 'Test Issue', …(2) }

[32m- Expected:[39m 
{
  "body": "This is a test issue",
  "labels": [
    "bug",
    "enhancement",
  ],
  "title": "Test Issue",
}

[31m+ Received:[39m 
undefined

 ❯ tests/github/github-client.test.ts:295:28
    293|       })
    294| 
    295|       expect(capturedBody).toEqual(issueData)
       |                            ^
    296|     })
    297| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[47/53]⎯

 FAIL  tests/github/github-client.test.ts > GitHubClient > request serialization > should handle response deserialization
AssertionError: expected '' to deeply equal { Object (number, title, ...) }

[32m- Expected:[39m 
{
  "created_at": "2024-01-01T00:00:00Z",
  "number": 1,
  "title": "Test Issue",
  "updated_at": "2024-01-01T00:00:00Z",
}

[31m+ Received:[39m 
""

 ❯ tests/github/github-client.test.ts:320:29
    318|       })
    319| 
    320|       expect(response.data).toEqual(mockIssue)
       |                             ^
    321|       expect(response.status).toBe(200)
    322|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[48/53]⎯

 FAIL  tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query optimization > should automatically split queries that exceed limits
TypeError: Cannot read properties of undefined (reading 'repository')
 ❯ GitHubClient.executeLargeGraphQLQuery src/lib/github/client/index.ts:1030:22
    1028|         }
    1029| 
    1030|         if (response.repository?.issues?.edges) {
       |                      ^
    1031|           results.repository.issues.edges.push(...response.repository.…
    1032|         }
 ❯ tests/github/graphql-rate-limiting.test.ts:204:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[49/53]⎯

 FAIL  tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query batching with aliases > should batch multiple queries using aliases
TypeError: Cannot read properties of undefined (reading 'data')
 ❯ GitHubClient.batchGraphQLQueries src/lib/github/client/index.ts:1072:19
    1070|     // Execute single batched query
    1071|     const result = (await this.graphql(batchedQuery)) as Record<string…
    1072|     return result.data || result
       |                   ^
    1073|   }
    1074| 
 ❯ tests/github/graphql-rate-limiting.test.ts:235:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[50/53]⎯

 FAIL  tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Query batching with aliases > should respect point limits when batching
TypeError: Cannot read properties of undefined (reading 'data')
 ❯ GitHubClient.batchGraphQLQueriesWithPointLimit src/lib/github/client/index.ts:1094:27
    1092|     for (const batchQuery of batchedResult) {
    1093|       const result = (await this.graphql(batchQuery)) as Record<string…
    1094|       const data = result.data || result
       |                           ^
    1095|       if (typeof data === 'object' && data !== null) {
    1096|         combinedResult = { ...combinedResult, ...data }
 ❯ tests/github/graphql-rate-limiting.test.ts:287:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[51/53]⎯

 FAIL  tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Rate limit integration > should include rate limit info in GraphQL responses
TypeError: Cannot read properties of undefined (reading 'rateLimit')
 ❯ GitHubClient.graphqlWithRateLimit src/lib/github/client/index.ts:1114:21
    1112| 
    1113|     const typedResult = result as Record<string, unknown> & { rateLimi…
    1114|     if (typedResult.rateLimit) {
       |                     ^
    1115|       this.rateLimitManager.updateFromGraphQLResponse(typedResult.rate…
    1116|     }
 ❯ tests/github/graphql-rate-limiting.test.ts:320:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[52/53]⎯

 FAIL  tests/github/graphql-rate-limiting.test.ts > GraphQL Point-Aware Rate Limiting > Rate limit integration > should automatically add rateLimit to queries when needed
TypeError: Cannot read properties of undefined (reading 'query')
 ❯ tests/github/graphql-rate-limiting.test.ts:376:27
    374|       await client.graphql(`query { viewer { login } }`)
    375|       
    376|       expect(capturedBody.query).toContain('rateLimit')
       |                           ^
    377|       expect(capturedBody.query).toContain('viewer')
    378|     })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[53/53]⎯


 Test Files  11 failed | 23 passed (34)
      Tests  53 failed | 506 passed | 2 skipped (561)
   Start at  15:35:04
   Duration  12.46s (transform 394ms, setup 138ms, collect 804ms, tests 9.21s, environment 0ms, prepare 71ms)

 ELIFECYCLE  Command failed with exit code 1.
