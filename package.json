{
  "name": "contribux",
  "version": "0.1.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "// === CORE DEVELOPMENT ===": "",
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "clean": "rm -rf .next && rm -rf out",
    "analyze": "cross-env ANALYZE=true next build",
    "// === CODE QUALITY ===": "",
    "lint": "biome check .",
    "lint:fix": "biome check --write .",
    "lint:unsafe": "biome check --write --unsafe .",
    "format": "biome format --write .",
    "format:check": "biome format .",
    "quality": "pnpm run type-check && pnpm run lint && pnpm run format:check",
    "quality:fix": "pnpm run type-check && pnpm run lint:fix && pnpm run format",
    "type-check": "tsc --noEmit",
    "// === DEPENDENCY MANAGEMENT ===": "",
    "deps:audit": "pnpm audit",
    "deps:update": "pnpm update --interactive",
    "deps:outdated": "pnpm outdated",
    "deps:analyze": "node scripts/dependency-analysis.js",
    "bundle:analyze": "npx bundle-analyzer",
    "security:audit": "pnpm audit --audit-level moderate",
    "security:fix": "pnpm audit --fix",
    "// === DATABASE MANAGEMENT ===": "",
    "db:status": "echo 'Database: Neon PostgreSQL with connection pooling enabled'",
    "db:test-connection": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT version()\\`.then(r => console.log('✅ Connected:', r[0].version)).catch(e => console.error('❌ Connection failed:', e.message))\"",
    "db:test-dev": "cross-env DATABASE_URL=\"$DATABASE_URL_DEV\" pnpm db:test-connection",
    "db:test-prod": "pnpm db:test-connection",
    "db:analyze": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`ANALYZE\\`.then(() => console.log('✅ Database analyzed')).catch(e => console.error('❌ Analysis failed:', e.message))\"",
    "db:indexes": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT schemaname, tablename, indexname FROM pg_indexes WHERE schemaname = 'public' ORDER BY tablename\\`.then(r => console.table(r)).catch(e => console.error('❌ Query failed:', e.message))\"",
    "db:health": "./scripts/monitoring/health-check.sh",
    "db:slow-queries": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT query, calls, total_exec_time, mean_exec_time FROM pg_stat_statements WHERE total_exec_time > 1000 ORDER BY total_exec_time DESC LIMIT 10\\`.then(r => r.length > 0 ? console.table(r) : console.log('✅ No slow queries found')).catch(e => console.log('ℹ️ pg_stat_statements not available'))\"",
    "db:vector-metrics": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT indexname, schemaname, tablename, pg_size_pretty(pg_relation_size(indexrelid)) as size FROM pg_stat_user_indexes WHERE indexname LIKE '%hnsw%' ORDER BY pg_relation_size(indexrelid) DESC\\`.then(r => r.length > 0 ? console.table(r) : console.log('ℹ️ No HNSW indexes found')).catch(e => console.error('❌ Query failed:', e.message))\"",
    "db:performance-report": "node -e \"const {DatabaseMonitor} = require('./src/lib/monitoring/database-monitor'); const monitor = new DatabaseMonitor(process.env.DATABASE_URL); monitor.generatePerformanceReport().then(report => console.log(report)).catch(e => console.error('❌ Report generation failed:', e.message))\"",
    "// === DATABASE PERFORMANCE SUITE ===": "",
    "db:perf": "node scripts/database-performance-suite.js",
    "db:perf:test": "node scripts/database-performance-suite.js test",
    "db:perf:benchmark": "node scripts/database-performance-suite.js benchmark",
    "db:perf:monitor": "node scripts/database-performance-suite.js monitor",
    "db:perf:dashboard": "node scripts/database-performance-suite.js dashboard",
    "db:perf:health": "node scripts/database-performance-suite.js health",
    "db:perf:optimize": "node scripts/database-performance-suite.js optimize",
    "db:perf:apply": "node scripts/database-performance-suite.js apply-sql",
    "db:perf:cache": "node scripts/database-performance-suite.js cache-stats",
    "db:perf:summary": "node scripts/database-performance-suite.js summary",
    "// === TESTING ===": "",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:coverage": "vitest run --coverage",
    "test:db": "cross-env NODE_ENV=test vitest run --config vitest.integration.config.ts",
    "test:db:pglite": "cross-env NODE_ENV=test vitest run --config vitest.integration.config.ts",
    "test:db:neon": "cross-env NODE_ENV=test vitest run --config vitest.integration.config.ts",
    "test:ci": "vitest run --coverage --reporter=verbose",
    "test:ui": "vitest --ui",
    "test:fast": "vitest run --config vitest.performance.config.ts",
    "test:fast:watch": "vitest --config vitest.performance.config.ts",
    "test:parallel": "vitest run --pool=threads --max-concurrency=4",
    "test:sharded": "vitest run --pool=threads --shard=1/4",
    "test:vector": "cross-env NODE_ENV=test vitest run tests/database/vector-search.test.ts",
    "test:performance": "node scripts/performance/benchmark-suite.js",
    "test:cache": "node scripts/performance/cache-test-utils.js",
    "test:full": "node scripts/test-runner.js full",
    "test:quick": "node scripts/test-runner.js quick",
    "test:setup": "node scripts/test-runner.js setup",
    "test:cleanup": "node scripts/test-runner.js cleanup",
    "memory:config": "node scripts/memory-config.js",
    "memory:set": "node scripts/memory-config.js set",
    "memory:show": "node scripts/memory-config.js show",
    "memory:profiles": "node scripts/memory-config.js profiles",
    "memory:test": "STRICT_MEMORY_CHECKS=true vitest run tests/memory/",
    "memory:pressure": "NODE_OPTIONS=\"--max-old-space-size=1024\" vitest run tests/memory/ --reporter=verbose",
    "test:integration": "tsx tests/integration/infrastructure/cli.ts run",
    "test:integration:watch": "tsx tests/integration/infrastructure/cli.ts watch",
    "test:integration:analyze": "tsx tests/integration/infrastructure/cli.ts analyze",
    "test:integration:report": "tsx tests/integration/infrastructure/cli.ts report",
    "test:integration:status": "tsx tests/integration/infrastructure/cli.ts status",
    "test:integration:cleanup": "tsx tests/integration/infrastructure/cli.ts cleanup",
    "test:integration:ci": "tsx tests/integration/infrastructure/cli.ts run --ci --bail --no-parallel",
    "test:integration:verify": "tsx tests/integration/infrastructure/verify-setup.ts",
    "db:migrate": "node scripts/db-migrations/run-migrations.js",
    "db:migrate:status": "node scripts/db-migrations/run-migrations.js status",
    "db:migrate:reset": "node scripts/db-migrations/run-migrations.js reset",
    "db:migrate:enhanced": "node scripts/db-migrations/run-migrations-enhanced.js",
    "db:migrate:enhanced:status": "node scripts/db-migrations/run-migrations-enhanced.js status",
    "db:migrate:enhanced:reset": "node scripts/db-migrations/run-migrations-enhanced.js reset",
    "db:migrate:webauthn": "node scripts/webauthn-migration-verification.js",
    "db:migrate:analyze": "node scripts/webauthn-migration-analysis.js",
    "db:seed": "node scripts/db-migrations/seed-test-data.js",
    "neon:list-branches": "node -e \"const {NeonBranchManager} = require('./src/lib/test-utils/neon-branch-manager'); const m = new NeonBranchManager({apiKey: process.env.NEON_API_KEY, projectId: process.env.NEON_PROJECT_ID}); m.listBranches().then(b => console.table(b.map(x => ({name: x.name, id: x.id, created: x.created_at})))).catch(console.error)\"",
    "neon:cleanup-test-branches": "node -e \"const {NeonBranchManager} = require('./src/lib/test-utils/neon-branch-manager'); const m = new NeonBranchManager({apiKey: process.env.NEON_API_KEY, projectId: process.env.NEON_PROJECT_ID}); m.listBranches().then(branches => Promise.all(branches.filter(b => b.name.startsWith('test-')).map(b => m.deleteBranch(b.id)))).then(() => console.log('Cleaned up test branches')).catch(console.error)\"",
    "memory:check": "node scripts/memory-analysis.js",
    "memory:watch": "node scripts/memory-analysis.js --watch",
    "memory:snapshot": "node scripts/memory-analysis.js --snapshot",
    "build:optimized": "./scripts/build-with-memory-check.sh",
    "build:analyze": "./scripts/build-with-memory-check.sh --analyze",
    "// === DEVELOPMENT DEBUG ===": "",
    "dev:debug": "NODE_OPTIONS='--inspect' next dev --turbo",
    "dev:performance": "NEXT_DEBUG_PERFORMANCE=1 PERFORMANCE_MONITORING=true next dev --turbo",
    "dev:api-debug": "API_DEBUG=true DEBUG='api:*' next dev --turbo",
    "dev:db-debug": "DATABASE_DEBUG=1 DEBUG='db:*' next dev --turbo",
    "dev:oauth-debug": "OAUTH_DEBUG=true DEBUG='oauth:*,auth:*' next dev --turbo",
    "dev:github-debug": "GITHUB_DEBUG=true DEBUG='github:*' next dev --turbo",
    "dev:memory-debug": "NODE_OPTIONS='--inspect --max-old-space-size=4096' MEMORY_MONITORING=true next dev --turbo",
    "dev:verbose": "DEBUG='*' next dev --turbo",
    "// === API TESTING ===": "",
    "api:test": "curl -X GET http://localhost:3000/api/health",
    "api:test-auth": "curl -X GET http://localhost:3000/api/auth/providers",
    "oauth:audit": "node scripts/oauth-audit.js",
    "oauth:test": "node scripts/test-oauth.js",
    "api:test-search": "curl -X GET 'http://localhost:3000/api/search/repositories?q=react'",
    "debug:api-routes": "NODE_OPTIONS='--inspect' npx tsx scripts/debug/api-routes-test.js",
    "debug:oauth-flow": "NODE_OPTIONS='--inspect' npx tsx scripts/debug/oauth-flow-test.js",
    "debug:db-connection": "NODE_OPTIONS='--inspect' npx tsx scripts/debug/db-connection-test.js",
    "performance:monitor": "node scripts/performance/performance-monitor.js",
    "performance:profile": "NODE_OPTIONS='--prof' next dev",
    "performance:analyze-profile": "node --prof-process isolate-*.log > profile.txt",
    "performance:optimize": "node scripts/performance/comprehensive-optimizer.js",
    "performance:cache-test": "node scripts/performance/cache-test-utils.js",
    "performance:report": "node scripts/performance/benchmark-suite.js && node scripts/performance/comprehensive-optimizer.js",
    "tools:api-client": "npx thunder-client",
    "tools:db-admin": "echo 'Use pgAdmin or TablePlus to connect to: $DATABASE_URL'",
    "monitor:real-time": "node scripts/monitoring/real-time-monitor.js",
    "logs:api": "DEBUG='api:*' pnpm dev 2>&1 | grep 'api:'",
    "logs:db": "DEBUG='db:*' pnpm dev 2>&1 | grep 'db:'",
    "logs:oauth": "DEBUG='oauth:*,auth:*' pnpm dev 2>&1 | grep -E '(oauth:|auth:)'",
    "health:full": "pnpm db:health && pnpm api:test && pnpm db:performance-report",
    "// === E2E TESTING ===": "",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:e2e:headed": "playwright test --headed",
    "test:e2e:debug": "playwright test --debug",
    "test:e2e:report": "playwright show-report",
    "test:e2e:install": "playwright install"
  },
  "author": "",
  "license": "ISC",
  "packageManager": "pnpm@10.11.1",
  "sideEffects": false,
  "dependencies": {
    "@neondatabase/serverless": "^1.0.1",
    "@octokit/plugin-retry": "^8.0.1",
    "@octokit/plugin-throttling": "^11.0.1",
    "@octokit/rest": "^22.0.0",
    "@octokit/types": "^14.1.0",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-slot": "^1.2.3",
    "@simplewebauthn/browser": "^13.1.0",
    "@simplewebauthn/server": "^13.1.1",
    "@t3-oss/env-nextjs": "^0.13.8",
    "@tanstack/react-query": "^5.81.5",
    "@types/uuid": "^10.0.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "drizzle-orm": "^0.44.2",
    "framer-motion": "^12.20.1",
    "ioredis": "^5.6.1",
    "jose": "^6.0.11",
    "lucide-react": "^0.525.0",
    "next": "^15.3.4",
    "next-auth": "5.0.0-beta.28",
    "next-pwa": "^5.6.0",
    "octokit": "5.0.3",
    "rate-limiter-flexible": "^7.1.1",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "reflect-metadata": "^0.2.2",
    "tailwind-merge": "^3.3.1",
    "uuid": "^11.1.0",
    "zod": "^3.25.67"
  },
  "devDependencies": {
    "@biomejs/biome": "^2.0.6",
    "@electric-sql/pglite": "^0.3.4",
    "@faker-js/faker": "^9.8.0",
    "@fast-check/vitest": "^0.2.1",
    "@next/bundle-analyzer": "^15.3.4",
    "@peculiar/webcrypto": "^1.5.0",
    "@playwright/test": "^1.53.2",
    "@tailwindcss/postcss": "^4.1.11",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/node": "^24.0.8",
    "@types/pg": "^8.15.4",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "autoprefixer": "^10.4.21",
    "commander": "^14.0.0",
    "cross-env": "^7.0.3",
    "dotenv": "^17.0.0",
    "drizzle-kit": "^0.31.4",
    "jsdom": "^26.1.0",
    "msw": "^2.10.2",
    "nock": "^14.0.5",
    "pg": "^8.16.3",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "tsx": "^4.20.3",
    "tw-animate-css": "^1.3.4",
    "typescript": "^5.8.3",
    "undici": "^7.11.0",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^3.2.4"
  },
  "pnpm": {
    "overrides": {
      "esbuild": ">=0.25.0"
    }
  }
}