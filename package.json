{
  "name": "contribux",
  "version": "0.1.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "biome check .",
    "lint:fix": "biome check --write .",
    "format": "biome format --write .",
    "format:check": "biome format .",
    "type-check": "tsc --noEmit",
    "clean": "rm -rf .next && rm -rf out",
    "analyze": "cross-env ANALYZE=true next build",
    "export": "next export",
    "db:setup": "./scripts/database/setup.sh",
    "db:stop": "./scripts/database/setup.sh stop",
    "db:restart": "./scripts/database/setup.sh restart",
    "db:logs": "./scripts/database/setup.sh logs",
    "db:clean": "./scripts/database/setup.sh clean",
    "db:status": "./scripts/database/setup.sh status",
    "db:health-check": "node -e \"const {createTestDatabaseHelper} = require('./tests/utils/database.ts'); createTestDatabaseHelper().performHealthCheck().then(h => console.log(JSON.stringify(h, null, 2))).catch(e => console.error('Health check failed:', e.message))\"",
    "db:test-connection": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT version()\\`.then(r => console.log('✅ Connected:', r[0].version)).catch(e => console.error('❌ Connection failed:', e.message))\"",
    "db:test-dev": "cross-env DATABASE_URL=\"$DATABASE_URL_DEV\" npm run db:test-connection",
    "db:test-prod": "npm run db:test-connection",
    "db:analyze": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`ANALYZE\\`.then(() => console.log('✅ Database analyzed')).catch(e => console.error('❌ Analysis failed:', e.message))\"",
    "db:indexes": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT schemaname, tablename, indexname FROM pg_indexes WHERE schemaname = 'public' ORDER BY tablename\\`.then(r => console.table(r)).catch(e => console.error('❌ Query failed:', e.message))\"",
    "db:health": "./scripts/monitoring/health-check.sh",
    "db:slow-queries": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT query, calls, total_exec_time, mean_exec_time FROM pg_stat_statements WHERE total_exec_time > 1000 ORDER BY total_exec_time DESC LIMIT 10\\`.then(r => r.length > 0 ? console.table(r) : console.log('✅ No slow queries found')).catch(e => console.log('ℹ️ pg_stat_statements not available'))\"",
    "db:vector-metrics": "node -e \"const {neon} = require('@neondatabase/serverless'); const sql = neon(process.env.DATABASE_URL); sql\\`SELECT indexname, schemaname, tablename, pg_size_pretty(pg_relation_size(indexrelid)) as size FROM pg_stat_user_indexes WHERE indexname LIKE '%hnsw%' ORDER BY pg_relation_size(indexrelid) DESC\\`.then(r => r.length > 0 ? console.table(r) : console.log('ℹ️ No HNSW indexes found')).catch(e => console.error('❌ Query failed:', e.message))\"",
    "db:performance-report": "node -e \"const {DatabaseMonitor} = require('./src/lib/monitoring/database-monitor'); const monitor = new DatabaseMonitor(process.env.DATABASE_URL); monitor.generatePerformanceReport().then(report => console.log(report)).catch(e => console.error('❌ Report generation failed:', e.message))\"",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:coverage": "vitest run --coverage",
    "test:db": "cross-env NODE_ENV=test DATABASE_URL=\"$DATABASE_URL_TEST\" vitest run --dir tests/database",
    "test:ci": "vitest run --coverage --reporter=verbose",
    "test:ui": "vitest --ui"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "packageManager": "pnpm@10.11.1",
  "dependencies": {
    "@neondatabase/serverless": "^1.0.0",
    "@octokit/auth-app": "^8.0.1",
    "@octokit/core": "^7.0.2",
    "@octokit/graphql": "^9.0.1",
    "@octokit/plugin-rest-endpoint-methods": "^16.0.0",
    "@octokit/plugin-retry": "^8.0.1",
    "@octokit/plugin-throttling": "^11.0.1",
    "@octokit/rest": "^22.0.0",
    "@octokit/types": "^14.1.0",
    "dataloader": "^2.2.3",
    "next": "^15.3.4",
    "next-pwa": "^5.6.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "universal-github-app-jwt": "^2.2.2",
    "zod": "^3.25.67"
  },
  "devDependencies": {
    "@biomejs/biome": "^2.0.0",
    "@tailwindcss/postcss": "^4.1.10",
    "@types/node": "^24.0.3",
    "@types/pg": "^8.15.4",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "autoprefixer": "^10.4.21",
    "cross-env": "^7.0.3",
    "dotenv": "^16.5.0",
    "msw": "^2.10.2",
    "nock": "^14.0.5",
    "pg": "^8.16.2",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.10",
    "typescript": "^5.8.3",
    "vitest": "^3.2.4"
  }
}
